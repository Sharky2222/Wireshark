
HelloWorld.elf:     file format elf32-littlenios2
HelloWorld.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004230

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000028f4 memsz 0x000028f4 flags r-x
    LOAD off    0x00003914 vaddr 0x00006914 paddr 0x00006c54 align 2**12
         filesz 0x00000340 memsz 0x00000340 flags rw-
    LOAD off    0x00003f94 vaddr 0x00006f94 paddr 0x00006f94 align 2**12
         filesz 0x00000000 memsz 0x00000118 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002688  00004230  00004230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000005c  000068b8  000068b8  000038b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000340  00006914  00006c54  00003914  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000118  00006f94  00006f94  00003f94  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory_nios 00000000  000070ac  000070ac  00003c54  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  00008000  00008000  00003c54  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00003c54  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000005e0  00000000  00000000  00003c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000076b5  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002821  00000000  00000000  0000b90d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002c27  00000000  00000000  0000e12e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000d44  00000000  00000000  00010d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f09  00000000  00000000  00011a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000006f2  00000000  00000000  000139a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00014098  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000180  00000000  00000000  000140a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00015f76  2**0
                  CONTENTS, READONLY
 19 .cpu          00000006  00000000  00000000  00015f79  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00015f7f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00015f80  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00015f81  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00015f85  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  00015f89  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00015f8d  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000007f  00000000  00000000  00015f97  2**0
                  CONTENTS, READONLY
 27 .jdi          000049ac  00000000  00000000  00016016  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0007cdb5  00000000  00000000  0001a9c2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004230 l    d  .text	00000000 .text
000068b8 l    d  .rodata	00000000 .rodata
00006914 l    d  .rwdata	00000000 .rwdata
00006f94 l    d  .bss	00000000 .bss
000070ac l    d  .onchip_memory_nios	00000000 .onchip_memory_nios
00008000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloWorld_bsp//obj/HAL/src/crt0.o
00004268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00006914 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00004460 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
000045c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00004704 l     F .text	00000034 alt_dev_reg
000069f4 l     O .rwdata	0000002c UART
00006a20 l     O .rwdata	00000030 sgdma_rx
00006a50 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00004a10 l     F .text	0000003c alt_get_errno
00005640 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_close.c
000057a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00005900 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000592c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00005e1c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00005f7c l     F .text	0000003c alt_get_errno
00005fb8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00006fa8 g     O .bss	00000004 alt_instruction_exception_handler
0000454c g     F .text	0000007c alt_main
000042a0 g     F .text	00000080 _puts_r
00006fac g     O .bss	00000100 alt_irq
00006c54 g       *ABS*	00000000 __flash_rwdata_start
00004b70 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
00005288 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
00006284 g     F .text	00000024 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004dd8 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00004020 g       *ABS*	00000000 __flash_exceptions_start
00006f94 g     O .bss	00000004 errno
00006f9c g     O .bss	00000004 alt_argv
0000ec28 g       *ABS*	00000000 _gp
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory_nios
00006aa8 g     O .rwdata	00000180 alt_fd_list
00005acc g     F .text	00000090 alt_find_dev
00005f00 g     F .text	0000007c alt_io_redirect
000068b8 g       *ABS*	00000000 __DTOR_END__
00004320 g     F .text	00000014 puts
00006474 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00004ed0 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
00004890 g     F .text	000000ec altera_avalon_jtag_uart_read
00005008 g     F .text	0000005c alt_avalon_sgdma_stop
000058b8 g     F .text	00000028 alt_dcache_flush
00006c48 g     O .rwdata	00000004 alt_max_fd
00006c28 g     O .rwdata	00000004 _global_impure_ptr
000070ac g       *ABS*	00000000 __bss_end
00005d2c g     F .text	000000f0 alt_iic_isr_register
00004a4c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
00005ce0 g     F .text	0000004c alt_ic_irq_enabled
00008000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00006fa4 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	000000d4 alt_irq_handler
00006a80 g     O .rwdata	00000028 alt_dev_null
00005064 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
000058e0 g     F .text	00000020 alt_dcache_flush_all
00006c54 g       *ABS*	00000000 __ram_rwdata_end
00006c40 g     O .rwdata	00000008 alt_dev_list
00004604 g     F .text	00000100 write
000051a8 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
00006914 g       *ABS*	00000000 __ram_rodata_end
00004e50 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
00004f5c g     F .text	00000054 alt_avalon_sgdma_register_callback
000070ac g       *ABS*	00000000 end
000041d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000068b8 g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00005228 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
0000497c g     F .text	00000094 altera_avalon_jtag_uart_write
00004c80 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
00004d78 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
000066cc g     F .text	00000190 __call_exitprocs
00004230 g     F .text	0000003c _start
000050c8 g     F .text	00000054 alt_avalon_sgdma_open
00004770 g     F .text	00000060 alt_sys_init
00006574 g     F .text	00000158 __register_exitproc
0000685c g     F .text	00000028 .hidden __mulsi3
00006914 g       *ABS*	00000000 __ram_rwdata_start
000068b8 g       *ABS*	00000000 __ram_rodata_start
000047d0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000063b0 g     F .text	000000c4 alt_get_fd
00006544 g     F .text	00000030 memcmp
000070ac g       *ABS*	00000000 __alt_stack_base
000062a8 g     F .text	00000108 alt_find_file
00005968 g     F .text	000000a4 alt_dev_llist_insert
00004fb0 g     F .text	00000058 alt_avalon_sgdma_start
00004350 g     F .text	000000b8 __sfvwrite_small_dev
00006f94 g       *ABS*	00000000 __bss_start
0000426c g     F .text	00000034 main
00006fa0 g     O .bss	00000004 alt_envp
00004830 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00006c30 g     O .rwdata	00000008 alt_sgdma_list
00006c4c g     O .rwdata	00000004 alt_errno
000068b8 g       *ABS*	00000000 __CTOR_END__
000068b8 g       *ABS*	00000000 __flash_rodata_start
000068b8 g       *ABS*	00000000 __DTOR_LIST__
00004738 g     F .text	00000038 alt_irq_init
00006200 g     F .text	00000084 alt_release_fd
00006510 g     F .text	00000014 atexit
00004408 g     F .text	00000058 _write_r
00006c2c g     O .rwdata	00000004 _impure_ptr
00006f98 g     O .bss	00000004 alt_argc
00005a6c g     F .text	00000060 _do_dtors
00004020 g       .exceptions	00000000 alt_irq_entry
00006c38 g     O .rwdata	00000008 alt_fs_list
00004020 g       *ABS*	00000000 __ram_exceptions_start
00005b7c g     F .text	00000050 alt_ic_isr_register
00006c54 g       *ABS*	00000000 _edata
000070ac g       *ABS*	00000000 _end
00004230 g       *ABS*	00000000 __ram_exceptions_end
00005c54 g     F .text	0000008c alt_ic_irq_disable
0000511c g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
00006524 g     F .text	00000020 exit
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00006884 g     F .text	00000034 _exit
00004334 g     F .text	0000001c strlen
000060a4 g     F .text	0000015c open
00005b5c g     F .text	00000020 alt_icache_flush_all
00006c50 g     O .rwdata	00000004 alt_priority_mask
00005bcc g     F .text	00000088 alt_ic_irq_enable
00004cf4 g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00005a0c g     F .text	00000060 _do_ctors
000057e0 g     F .text	000000d8 close
000044c8 g     F .text	00000084 alt_load
000056fc g     F .text	000000a8 alt_avalon_sgdma_init



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08508c14 	ori	at,at,16944
    jmp r1
    4008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	00041d00 	call	41d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defff904 	addi	sp,sp,-28
    4100:	dfc00615 	stw	ra,24(sp)
    4104:	df000515 	stw	fp,20(sp)
    4108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    410c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4110:	0005313a 	rdctl	r2,ipending
    4114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    4118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    4120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    4124:	00800044 	movi	r2,1
    4128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    412c:	e0fffb17 	ldw	r3,-20(fp)
    4130:	e0bffc17 	ldw	r2,-16(fp)
    4134:	1884703a 	and	r2,r3,r2
    4138:	10001426 	beq	r2,zero,418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    413c:	00800034 	movhi	r2,0
    4140:	109beb04 	addi	r2,r2,28588
    4144:	e0fffd17 	ldw	r3,-12(fp)
    4148:	180690fa 	slli	r3,r3,3
    414c:	10c5883a 	add	r2,r2,r3
    4150:	10c00017 	ldw	r3,0(r2)
    4154:	00800034 	movhi	r2,0
    4158:	109beb04 	addi	r2,r2,28588
    415c:	e13ffd17 	ldw	r4,-12(fp)
    4160:	200890fa 	slli	r4,r4,3
    4164:	1105883a 	add	r2,r2,r4
    4168:	10800104 	addi	r2,r2,4
    416c:	10800017 	ldw	r2,0(r2)
    4170:	1009883a 	mov	r4,r2
    4174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    4178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    417c:	0005313a 	rdctl	r2,ipending
    4180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    4184:	e0bfff17 	ldw	r2,-4(fp)
    4188:	00000706 	br	41a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	1085883a 	add	r2,r2,r2
    4194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    4198:	e0bffd17 	ldw	r2,-12(fp)
    419c:	10800044 	addi	r2,r2,1
    41a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    41a4:	003fe106 	br	412c <_gp+0xffff5504>

    active = alt_irq_pending ();
    41a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    41ac:	e0bffb17 	ldw	r2,-20(fp)
    41b0:	103fdb1e 	bne	r2,zero,4120 <_gp+0xffff54f8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    41b4:	0001883a 	nop
}
    41b8:	0001883a 	nop
    41bc:	e037883a 	mov	sp,fp
    41c0:	dfc00117 	ldw	ra,4(sp)
    41c4:	df000017 	ldw	fp,0(sp)
    41c8:	dec00204 	addi	sp,sp,8
    41cc:	f800283a 	ret

000041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    41d0:	defffb04 	addi	sp,sp,-20
    41d4:	dfc00415 	stw	ra,16(sp)
    41d8:	df000315 	stw	fp,12(sp)
    41dc:	df000304 	addi	fp,sp,12
    41e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
    41e4:	00bfffc4 	movi	r2,-1
    41e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
    41ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    41f0:	d0a0e017 	ldw	r2,-31872(gp)
    41f4:	10000726 	beq	r2,zero,4214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    41f8:	d0a0e017 	ldw	r2,-31872(gp)
    41fc:	e0fffd17 	ldw	r3,-12(fp)
    4200:	e1bffe17 	ldw	r6,-8(fp)
    4204:	e17fff17 	ldw	r5,-4(fp)
    4208:	1809883a 	mov	r4,r3
    420c:	103ee83a 	callr	r2
    4210:	00000206 	br	421c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    4218:	0005883a 	mov	r2,zero
}
    421c:	e037883a 	mov	sp,fp
    4220:	dfc00117 	ldw	ra,4(sp)
    4224:	df000017 	ldw	fp,0(sp)
    4228:	dec00204 	addi	sp,sp,8
    422c:	f800283a 	ret

Disassembly of section .text:

00004230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4230:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4234:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    423c:	d6bb0a14 	ori	gp,gp,60456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4244:	109be514 	ori	r2,r2,28564

    movhi r3, %hi(__bss_end)
    4248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    424c:	18dc2b14 	ori	r3,r3,28844

    beq r2, r3, 1f
    4250:	10c00326 	beq	r2,r3,4260 <_start+0x30>

0:
    stw zero, (r2)
    4254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    425c:	10fffd36 	bltu	r2,r3,4254 <_gp+0xffff562c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4260:	00044c80 	call	44c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4264:	000454c0 	call	454c <alt_main>

00004268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4268:	003fff06 	br	4268 <_gp+0xffff5640>

0000426c <main>:
 */

#include <stdio.h>

int main()
{
    426c:	defffe04 	addi	sp,sp,-8
    4270:	dfc00115 	stw	ra,4(sp)
    4274:	df000015 	stw	fp,0(sp)
    4278:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
    427c:	01000034 	movhi	r4,0
    4280:	211a2e04 	addi	r4,r4,26808
    4284:	00043200 	call	4320 <puts>

  return 0;
    4288:	0005883a 	mov	r2,zero
}
    428c:	e037883a 	mov	sp,fp
    4290:	dfc00117 	ldw	ra,4(sp)
    4294:	df000017 	ldw	fp,0(sp)
    4298:	dec00204 	addi	sp,sp,8
    429c:	f800283a 	ret

000042a0 <_puts_r>:
    42a0:	defffd04 	addi	sp,sp,-12
    42a4:	dc000015 	stw	r16,0(sp)
    42a8:	2021883a 	mov	r16,r4
    42ac:	2809883a 	mov	r4,r5
    42b0:	dfc00215 	stw	ra,8(sp)
    42b4:	dc400115 	stw	r17,4(sp)
    42b8:	2823883a 	mov	r17,r5
    42bc:	00043340 	call	4334 <strlen>
    42c0:	81400217 	ldw	r5,8(r16)
    42c4:	01000034 	movhi	r4,0
    42c8:	2110d404 	addi	r4,r4,17232
    42cc:	29000115 	stw	r4,4(r5)
    42d0:	100f883a 	mov	r7,r2
    42d4:	880d883a 	mov	r6,r17
    42d8:	8009883a 	mov	r4,r16
    42dc:	00043500 	call	4350 <__sfvwrite_small_dev>
    42e0:	00ffffc4 	movi	r3,-1
    42e4:	10c00926 	beq	r2,r3,430c <_puts_r+0x6c>
    42e8:	81400217 	ldw	r5,8(r16)
    42ec:	01800034 	movhi	r6,0
    42f0:	01c00044 	movi	r7,1
    42f4:	28800117 	ldw	r2,4(r5)
    42f8:	319a3304 	addi	r6,r6,26828
    42fc:	8009883a 	mov	r4,r16
    4300:	103ee83a 	callr	r2
    4304:	10bfffe0 	cmpeqi	r2,r2,-1
    4308:	0085c83a 	sub	r2,zero,r2
    430c:	dfc00217 	ldw	ra,8(sp)
    4310:	dc400117 	ldw	r17,4(sp)
    4314:	dc000017 	ldw	r16,0(sp)
    4318:	dec00304 	addi	sp,sp,12
    431c:	f800283a 	ret

00004320 <puts>:
    4320:	00800034 	movhi	r2,0
    4324:	109b0b04 	addi	r2,r2,27692
    4328:	200b883a 	mov	r5,r4
    432c:	11000017 	ldw	r4,0(r2)
    4330:	00042a01 	jmpi	42a0 <_puts_r>

00004334 <strlen>:
    4334:	2005883a 	mov	r2,r4
    4338:	10c00007 	ldb	r3,0(r2)
    433c:	18000226 	beq	r3,zero,4348 <strlen+0x14>
    4340:	10800044 	addi	r2,r2,1
    4344:	003ffc06 	br	4338 <_gp+0xffff5710>
    4348:	1105c83a 	sub	r2,r2,r4
    434c:	f800283a 	ret

00004350 <__sfvwrite_small_dev>:
    4350:	2880000b 	ldhu	r2,0(r5)
    4354:	1080020c 	andi	r2,r2,8
    4358:	10002126 	beq	r2,zero,43e0 <__sfvwrite_small_dev+0x90>
    435c:	2880008f 	ldh	r2,2(r5)
    4360:	defffa04 	addi	sp,sp,-24
    4364:	dc000015 	stw	r16,0(sp)
    4368:	dfc00515 	stw	ra,20(sp)
    436c:	dd000415 	stw	r20,16(sp)
    4370:	dcc00315 	stw	r19,12(sp)
    4374:	dc800215 	stw	r18,8(sp)
    4378:	dc400115 	stw	r17,4(sp)
    437c:	2821883a 	mov	r16,r5
    4380:	10001216 	blt	r2,zero,43cc <__sfvwrite_small_dev+0x7c>
    4384:	2027883a 	mov	r19,r4
    4388:	3025883a 	mov	r18,r6
    438c:	3823883a 	mov	r17,r7
    4390:	05010004 	movi	r20,1024
    4394:	04400b0e 	bge	zero,r17,43c4 <__sfvwrite_small_dev+0x74>
    4398:	880f883a 	mov	r7,r17
    439c:	a440010e 	bge	r20,r17,43a4 <__sfvwrite_small_dev+0x54>
    43a0:	01c10004 	movi	r7,1024
    43a4:	8140008f 	ldh	r5,2(r16)
    43a8:	900d883a 	mov	r6,r18
    43ac:	9809883a 	mov	r4,r19
    43b0:	00044080 	call	4408 <_write_r>
    43b4:	0080050e 	bge	zero,r2,43cc <__sfvwrite_small_dev+0x7c>
    43b8:	88a3c83a 	sub	r17,r17,r2
    43bc:	90a5883a 	add	r18,r18,r2
    43c0:	003ff406 	br	4394 <_gp+0xffff576c>
    43c4:	0005883a 	mov	r2,zero
    43c8:	00000706 	br	43e8 <__sfvwrite_small_dev+0x98>
    43cc:	8080000b 	ldhu	r2,0(r16)
    43d0:	10801014 	ori	r2,r2,64
    43d4:	8080000d 	sth	r2,0(r16)
    43d8:	00bfffc4 	movi	r2,-1
    43dc:	00000206 	br	43e8 <__sfvwrite_small_dev+0x98>
    43e0:	00bfffc4 	movi	r2,-1
    43e4:	f800283a 	ret
    43e8:	dfc00517 	ldw	ra,20(sp)
    43ec:	dd000417 	ldw	r20,16(sp)
    43f0:	dcc00317 	ldw	r19,12(sp)
    43f4:	dc800217 	ldw	r18,8(sp)
    43f8:	dc400117 	ldw	r17,4(sp)
    43fc:	dc000017 	ldw	r16,0(sp)
    4400:	dec00604 	addi	sp,sp,24
    4404:	f800283a 	ret

00004408 <_write_r>:
    4408:	defffd04 	addi	sp,sp,-12
    440c:	dc000015 	stw	r16,0(sp)
    4410:	04000034 	movhi	r16,0
    4414:	dc400115 	stw	r17,4(sp)
    4418:	841be504 	addi	r16,r16,28564
    441c:	2023883a 	mov	r17,r4
    4420:	2809883a 	mov	r4,r5
    4424:	300b883a 	mov	r5,r6
    4428:	380d883a 	mov	r6,r7
    442c:	dfc00215 	stw	ra,8(sp)
    4430:	80000015 	stw	zero,0(r16)
    4434:	00046040 	call	4604 <write>
    4438:	00ffffc4 	movi	r3,-1
    443c:	10c0031e 	bne	r2,r3,444c <_write_r+0x44>
    4440:	80c00017 	ldw	r3,0(r16)
    4444:	18000126 	beq	r3,zero,444c <_write_r+0x44>
    4448:	88c00015 	stw	r3,0(r17)
    444c:	dfc00217 	ldw	ra,8(sp)
    4450:	dc400117 	ldw	r17,4(sp)
    4454:	dc000017 	ldw	r16,0(sp)
    4458:	dec00304 	addi	sp,sp,12
    445c:	f800283a 	ret

00004460 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    4460:	defffc04 	addi	sp,sp,-16
    4464:	df000315 	stw	fp,12(sp)
    4468:	df000304 	addi	fp,sp,12
    446c:	e13ffd15 	stw	r4,-12(fp)
    4470:	e17ffe15 	stw	r5,-8(fp)
    4474:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    4478:	e0fffe17 	ldw	r3,-8(fp)
    447c:	e0bffd17 	ldw	r2,-12(fp)
    4480:	18800c26 	beq	r3,r2,44b4 <alt_load_section+0x54>
  {
    while( to != end )
    4484:	00000806 	br	44a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    4488:	e0bffe17 	ldw	r2,-8(fp)
    448c:	10c00104 	addi	r3,r2,4
    4490:	e0fffe15 	stw	r3,-8(fp)
    4494:	e0fffd17 	ldw	r3,-12(fp)
    4498:	19000104 	addi	r4,r3,4
    449c:	e13ffd15 	stw	r4,-12(fp)
    44a0:	18c00017 	ldw	r3,0(r3)
    44a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    44a8:	e0fffe17 	ldw	r3,-8(fp)
    44ac:	e0bfff17 	ldw	r2,-4(fp)
    44b0:	18bff51e 	bne	r3,r2,4488 <_gp+0xffff5860>
    {
      *to++ = *from++;
    }
  }
}
    44b4:	0001883a 	nop
    44b8:	e037883a 	mov	sp,fp
    44bc:	df000017 	ldw	fp,0(sp)
    44c0:	dec00104 	addi	sp,sp,4
    44c4:	f800283a 	ret

000044c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    44c8:	defffe04 	addi	sp,sp,-8
    44cc:	dfc00115 	stw	ra,4(sp)
    44d0:	df000015 	stw	fp,0(sp)
    44d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    44d8:	01800034 	movhi	r6,0
    44dc:	319b1504 	addi	r6,r6,27732
    44e0:	01400034 	movhi	r5,0
    44e4:	295a4504 	addi	r5,r5,26900
    44e8:	01000034 	movhi	r4,0
    44ec:	211b1504 	addi	r4,r4,27732
    44f0:	00044600 	call	4460 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    44f4:	01800034 	movhi	r6,0
    44f8:	31908c04 	addi	r6,r6,16944
    44fc:	01400034 	movhi	r5,0
    4500:	29500804 	addi	r5,r5,16416
    4504:	01000034 	movhi	r4,0
    4508:	21100804 	addi	r4,r4,16416
    450c:	00044600 	call	4460 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4510:	01800034 	movhi	r6,0
    4514:	319a4504 	addi	r6,r6,26900
    4518:	01400034 	movhi	r5,0
    451c:	295a2e04 	addi	r5,r5,26808
    4520:	01000034 	movhi	r4,0
    4524:	211a2e04 	addi	r4,r4,26808
    4528:	00044600 	call	4460 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    452c:	00058e00 	call	58e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    4530:	0005b5c0 	call	5b5c <alt_icache_flush_all>
}
    4534:	0001883a 	nop
    4538:	e037883a 	mov	sp,fp
    453c:	dfc00117 	ldw	ra,4(sp)
    4540:	df000017 	ldw	fp,0(sp)
    4544:	dec00204 	addi	sp,sp,8
    4548:	f800283a 	ret

0000454c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    454c:	defffd04 	addi	sp,sp,-12
    4550:	dfc00215 	stw	ra,8(sp)
    4554:	df000115 	stw	fp,4(sp)
    4558:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    455c:	0009883a 	mov	r4,zero
    4560:	00047380 	call	4738 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    4564:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4568:	00047700 	call	4770 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    456c:	01800034 	movhi	r6,0
    4570:	319a3404 	addi	r6,r6,26832
    4574:	01400034 	movhi	r5,0
    4578:	295a3404 	addi	r5,r5,26832
    457c:	01000034 	movhi	r4,0
    4580:	211a3404 	addi	r4,r4,26832
    4584:	0005f000 	call	5f00 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    4588:	0005a0c0 	call	5a0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    458c:	01000034 	movhi	r4,0
    4590:	21169b04 	addi	r4,r4,23148
    4594:	00065100 	call	6510 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    4598:	d0a0dc17 	ldw	r2,-31888(gp)
    459c:	d0e0dd17 	ldw	r3,-31884(gp)
    45a0:	d120de17 	ldw	r4,-31880(gp)
    45a4:	200d883a 	mov	r6,r4
    45a8:	180b883a 	mov	r5,r3
    45ac:	1009883a 	mov	r4,r2
    45b0:	000426c0 	call	426c <main>
    45b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    45b8:	01000044 	movi	r4,1
    45bc:	00057e00 	call	57e0 <close>
  exit (result);
    45c0:	e13fff17 	ldw	r4,-4(fp)
    45c4:	00065240 	call	6524 <exit>

000045c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    45c8:	defffe04 	addi	sp,sp,-8
    45cc:	dfc00115 	stw	ra,4(sp)
    45d0:	df000015 	stw	fp,0(sp)
    45d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    45d8:	d0a00917 	ldw	r2,-32732(gp)
    45dc:	10000326 	beq	r2,zero,45ec <alt_get_errno+0x24>
    45e0:	d0a00917 	ldw	r2,-32732(gp)
    45e4:	103ee83a 	callr	r2
    45e8:	00000106 	br	45f0 <alt_get_errno+0x28>
    45ec:	d0a0db04 	addi	r2,gp,-31892
}
    45f0:	e037883a 	mov	sp,fp
    45f4:	dfc00117 	ldw	ra,4(sp)
    45f8:	df000017 	ldw	fp,0(sp)
    45fc:	dec00204 	addi	sp,sp,8
    4600:	f800283a 	ret

00004604 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4604:	defff904 	addi	sp,sp,-28
    4608:	dfc00615 	stw	ra,24(sp)
    460c:	df000515 	stw	fp,20(sp)
    4610:	df000504 	addi	fp,sp,20
    4614:	e13ffd15 	stw	r4,-12(fp)
    4618:	e17ffe15 	stw	r5,-8(fp)
    461c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    4620:	e0bffd17 	ldw	r2,-12(fp)
    4624:	10000816 	blt	r2,zero,4648 <write+0x44>
    4628:	01400304 	movi	r5,12
    462c:	e13ffd17 	ldw	r4,-12(fp)
    4630:	000685c0 	call	685c <__mulsi3>
    4634:	1007883a 	mov	r3,r2
    4638:	00800034 	movhi	r2,0
    463c:	109aaa04 	addi	r2,r2,27304
    4640:	1885883a 	add	r2,r3,r2
    4644:	00000106 	br	464c <write+0x48>
    4648:	0005883a 	mov	r2,zero
    464c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    4650:	e0bffb17 	ldw	r2,-20(fp)
    4654:	10002126 	beq	r2,zero,46dc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    4658:	e0bffb17 	ldw	r2,-20(fp)
    465c:	10800217 	ldw	r2,8(r2)
    4660:	108000cc 	andi	r2,r2,3
    4664:	10001826 	beq	r2,zero,46c8 <write+0xc4>
    4668:	e0bffb17 	ldw	r2,-20(fp)
    466c:	10800017 	ldw	r2,0(r2)
    4670:	10800617 	ldw	r2,24(r2)
    4674:	10001426 	beq	r2,zero,46c8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    4678:	e0bffb17 	ldw	r2,-20(fp)
    467c:	10800017 	ldw	r2,0(r2)
    4680:	10800617 	ldw	r2,24(r2)
    4684:	e0ffff17 	ldw	r3,-4(fp)
    4688:	180d883a 	mov	r6,r3
    468c:	e17ffe17 	ldw	r5,-8(fp)
    4690:	e13ffb17 	ldw	r4,-20(fp)
    4694:	103ee83a 	callr	r2
    4698:	e0bffc15 	stw	r2,-16(fp)
    469c:	e0bffc17 	ldw	r2,-16(fp)
    46a0:	1000070e 	bge	r2,zero,46c0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    46a4:	00045c80 	call	45c8 <alt_get_errno>
    46a8:	1007883a 	mov	r3,r2
    46ac:	e0bffc17 	ldw	r2,-16(fp)
    46b0:	0085c83a 	sub	r2,zero,r2
    46b4:	18800015 	stw	r2,0(r3)
        return -1;
    46b8:	00bfffc4 	movi	r2,-1
    46bc:	00000c06 	br	46f0 <write+0xec>
      }
      return rval;
    46c0:	e0bffc17 	ldw	r2,-16(fp)
    46c4:	00000a06 	br	46f0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    46c8:	00045c80 	call	45c8 <alt_get_errno>
    46cc:	1007883a 	mov	r3,r2
    46d0:	00800344 	movi	r2,13
    46d4:	18800015 	stw	r2,0(r3)
    46d8:	00000406 	br	46ec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    46dc:	00045c80 	call	45c8 <alt_get_errno>
    46e0:	1007883a 	mov	r3,r2
    46e4:	00801444 	movi	r2,81
    46e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
    46ec:	00bfffc4 	movi	r2,-1
}
    46f0:	e037883a 	mov	sp,fp
    46f4:	dfc00117 	ldw	ra,4(sp)
    46f8:	df000017 	ldw	fp,0(sp)
    46fc:	dec00204 	addi	sp,sp,8
    4700:	f800283a 	ret

00004704 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    4704:	defffd04 	addi	sp,sp,-12
    4708:	dfc00215 	stw	ra,8(sp)
    470c:	df000115 	stw	fp,4(sp)
    4710:	df000104 	addi	fp,sp,4
    4714:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    4718:	d1600604 	addi	r5,gp,-32744
    471c:	e13fff17 	ldw	r4,-4(fp)
    4720:	00059680 	call	5968 <alt_dev_llist_insert>
}
    4724:	e037883a 	mov	sp,fp
    4728:	dfc00117 	ldw	ra,4(sp)
    472c:	df000017 	ldw	fp,0(sp)
    4730:	dec00204 	addi	sp,sp,8
    4734:	f800283a 	ret

00004738 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    4738:	defffd04 	addi	sp,sp,-12
    473c:	dfc00215 	stw	ra,8(sp)
    4740:	df000115 	stw	fp,4(sp)
    4744:	df000104 	addi	fp,sp,4
    4748:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2E, nios2e);
    474c:	00062840 	call	6284 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4750:	00800044 	movi	r2,1
    4754:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4758:	0001883a 	nop
    475c:	e037883a 	mov	sp,fp
    4760:	dfc00117 	ldw	ra,4(sp)
    4764:	df000017 	ldw	fp,0(sp)
    4768:	dec00204 	addi	sp,sp,8
    476c:	f800283a 	ret

00004770 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    4770:	defffe04 	addi	sp,sp,-8
    4774:	dfc00115 	stw	ra,4(sp)
    4778:	df000015 	stw	fp,0(sp)
    477c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( UART, UART);
    4780:	01000034 	movhi	r4,0
    4784:	211a7d04 	addi	r4,r4,27124
    4788:	00047040 	call	4704 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
    478c:	01800044 	movi	r6,1
    4790:	000b883a 	mov	r5,zero
    4794:	01000034 	movhi	r4,0
    4798:	211a8804 	addi	r4,r4,27168
    479c:	00056fc0 	call	56fc <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
    47a0:	01800084 	movi	r6,2
    47a4:	000b883a 	mov	r5,zero
    47a8:	01000034 	movhi	r4,0
    47ac:	211a9404 	addi	r4,r4,27216
    47b0:	00056fc0 	call	56fc <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( ETH_TSE_0, eth_tse_0);
    47b4:	0001883a 	nop
}
    47b8:	0001883a 	nop
    47bc:	e037883a 	mov	sp,fp
    47c0:	dfc00117 	ldw	ra,4(sp)
    47c4:	df000017 	ldw	fp,0(sp)
    47c8:	dec00204 	addi	sp,sp,8
    47cc:	f800283a 	ret

000047d0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    47d0:	defffa04 	addi	sp,sp,-24
    47d4:	dfc00515 	stw	ra,20(sp)
    47d8:	df000415 	stw	fp,16(sp)
    47dc:	df000404 	addi	fp,sp,16
    47e0:	e13ffd15 	stw	r4,-12(fp)
    47e4:	e17ffe15 	stw	r5,-8(fp)
    47e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    47ec:	e0bffd17 	ldw	r2,-12(fp)
    47f0:	10800017 	ldw	r2,0(r2)
    47f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    47f8:	e0bffc17 	ldw	r2,-16(fp)
    47fc:	10c00a04 	addi	r3,r2,40
    4800:	e0bffd17 	ldw	r2,-12(fp)
    4804:	10800217 	ldw	r2,8(r2)
    4808:	100f883a 	mov	r7,r2
    480c:	e1bfff17 	ldw	r6,-4(fp)
    4810:	e17ffe17 	ldw	r5,-8(fp)
    4814:	1809883a 	mov	r4,r3
    4818:	00048900 	call	4890 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    481c:	e037883a 	mov	sp,fp
    4820:	dfc00117 	ldw	ra,4(sp)
    4824:	df000017 	ldw	fp,0(sp)
    4828:	dec00204 	addi	sp,sp,8
    482c:	f800283a 	ret

00004830 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    4830:	defffa04 	addi	sp,sp,-24
    4834:	dfc00515 	stw	ra,20(sp)
    4838:	df000415 	stw	fp,16(sp)
    483c:	df000404 	addi	fp,sp,16
    4840:	e13ffd15 	stw	r4,-12(fp)
    4844:	e17ffe15 	stw	r5,-8(fp)
    4848:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    484c:	e0bffd17 	ldw	r2,-12(fp)
    4850:	10800017 	ldw	r2,0(r2)
    4854:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    4858:	e0bffc17 	ldw	r2,-16(fp)
    485c:	10c00a04 	addi	r3,r2,40
    4860:	e0bffd17 	ldw	r2,-12(fp)
    4864:	10800217 	ldw	r2,8(r2)
    4868:	100f883a 	mov	r7,r2
    486c:	e1bfff17 	ldw	r6,-4(fp)
    4870:	e17ffe17 	ldw	r5,-8(fp)
    4874:	1809883a 	mov	r4,r3
    4878:	000497c0 	call	497c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    487c:	e037883a 	mov	sp,fp
    4880:	dfc00117 	ldw	ra,4(sp)
    4884:	df000017 	ldw	fp,0(sp)
    4888:	dec00204 	addi	sp,sp,8
    488c:	f800283a 	ret

00004890 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    4890:	defff704 	addi	sp,sp,-36
    4894:	df000815 	stw	fp,32(sp)
    4898:	df000804 	addi	fp,sp,32
    489c:	e13ffc15 	stw	r4,-16(fp)
    48a0:	e17ffd15 	stw	r5,-12(fp)
    48a4:	e1bffe15 	stw	r6,-8(fp)
    48a8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    48ac:	e0bffc17 	ldw	r2,-16(fp)
    48b0:	10800017 	ldw	r2,0(r2)
    48b4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    48b8:	e0bffd17 	ldw	r2,-12(fp)
    48bc:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	e0fffd17 	ldw	r3,-12(fp)
    48c8:	1885883a 	add	r2,r3,r2
    48cc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    48d0:	00001206 	br	491c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    48d4:	e0bff917 	ldw	r2,-28(fp)
    48d8:	10800037 	ldwio	r2,0(r2)
    48dc:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    48e0:	e0bffb17 	ldw	r2,-20(fp)
    48e4:	10a0000c 	andi	r2,r2,32768
    48e8:	10000626 	beq	r2,zero,4904 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    48ec:	e0bff817 	ldw	r2,-32(fp)
    48f0:	10c00044 	addi	r3,r2,1
    48f4:	e0fff815 	stw	r3,-32(fp)
    48f8:	e0fffb17 	ldw	r3,-20(fp)
    48fc:	10c00005 	stb	r3,0(r2)
    4900:	00000606 	br	491c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    4904:	e0fff817 	ldw	r3,-32(fp)
    4908:	e0bffd17 	ldw	r2,-12(fp)
    490c:	1880071e 	bne	r3,r2,492c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    4910:	e0bfff17 	ldw	r2,-4(fp)
    4914:	1090000c 	andi	r2,r2,16384
    4918:	1000061e 	bne	r2,zero,4934 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    491c:	e0fff817 	ldw	r3,-32(fp)
    4920:	e0bffa17 	ldw	r2,-24(fp)
    4924:	18bfeb36 	bltu	r3,r2,48d4 <_gp+0xffff5cac>
    4928:	00000306 	br	4938 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    492c:	0001883a 	nop
    4930:	00000106 	br	4938 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    4934:	0001883a 	nop
    
  }

  if (ptr != buffer)
    4938:	e0fff817 	ldw	r3,-32(fp)
    493c:	e0bffd17 	ldw	r2,-12(fp)
    4940:	18800426 	beq	r3,r2,4954 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    4944:	e0fff817 	ldw	r3,-32(fp)
    4948:	e0bffd17 	ldw	r2,-12(fp)
    494c:	1885c83a 	sub	r2,r3,r2
    4950:	00000606 	br	496c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    4954:	e0bfff17 	ldw	r2,-4(fp)
    4958:	1090000c 	andi	r2,r2,16384
    495c:	10000226 	beq	r2,zero,4968 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    4960:	00bffd44 	movi	r2,-11
    4964:	00000106 	br	496c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    4968:	00bffec4 	movi	r2,-5
}
    496c:	e037883a 	mov	sp,fp
    4970:	df000017 	ldw	fp,0(sp)
    4974:	dec00104 	addi	sp,sp,4
    4978:	f800283a 	ret

0000497c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    497c:	defff904 	addi	sp,sp,-28
    4980:	df000615 	stw	fp,24(sp)
    4984:	df000604 	addi	fp,sp,24
    4988:	e13ffc15 	stw	r4,-16(fp)
    498c:	e17ffd15 	stw	r5,-12(fp)
    4990:	e1bffe15 	stw	r6,-8(fp)
    4994:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    4998:	e0bffc17 	ldw	r2,-16(fp)
    499c:	10800017 	ldw	r2,0(r2)
    49a0:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    49a4:	e0bffe17 	ldw	r2,-8(fp)
    49a8:	e0fffd17 	ldw	r3,-12(fp)
    49ac:	1885883a 	add	r2,r3,r2
    49b0:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    49b4:	00000e06 	br	49f0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    49b8:	e0bffa17 	ldw	r2,-24(fp)
    49bc:	10800104 	addi	r2,r2,4
    49c0:	10800037 	ldwio	r2,0(r2)
    49c4:	10bfffec 	andhi	r2,r2,65535
    49c8:	10000926 	beq	r2,zero,49f0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    49cc:	e0fffa17 	ldw	r3,-24(fp)
    49d0:	e0bffd17 	ldw	r2,-12(fp)
    49d4:	11000044 	addi	r4,r2,1
    49d8:	e13ffd15 	stw	r4,-12(fp)
    49dc:	10800003 	ldbu	r2,0(r2)
    49e0:	10803fcc 	andi	r2,r2,255
    49e4:	1080201c 	xori	r2,r2,128
    49e8:	10bfe004 	addi	r2,r2,-128
    49ec:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    49f0:	e0fffd17 	ldw	r3,-12(fp)
    49f4:	e0bffb17 	ldw	r2,-20(fp)
    49f8:	18bfef36 	bltu	r3,r2,49b8 <_gp+0xffff5d90>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    49fc:	e0bffe17 	ldw	r2,-8(fp)
}
    4a00:	e037883a 	mov	sp,fp
    4a04:	df000017 	ldw	fp,0(sp)
    4a08:	dec00104 	addi	sp,sp,4
    4a0c:	f800283a 	ret

00004a10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4a10:	defffe04 	addi	sp,sp,-8
    4a14:	dfc00115 	stw	ra,4(sp)
    4a18:	df000015 	stw	fp,0(sp)
    4a1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    4a20:	d0a00917 	ldw	r2,-32732(gp)
    4a24:	10000326 	beq	r2,zero,4a34 <alt_get_errno+0x24>
    4a28:	d0a00917 	ldw	r2,-32732(gp)
    4a2c:	103ee83a 	callr	r2
    4a30:	00000106 	br	4a38 <alt_get_errno+0x28>
    4a34:	d0a0db04 	addi	r2,gp,-31892
}
    4a38:	e037883a 	mov	sp,fp
    4a3c:	dfc00117 	ldw	ra,4(sp)
    4a40:	df000017 	ldw	fp,0(sp)
    4a44:	dec00204 	addi	sp,sp,8
    4a48:	f800283a 	ret

00004a4c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    4a4c:	defffc04 	addi	sp,sp,-16
    4a50:	df000315 	stw	fp,12(sp)
    4a54:	df000304 	addi	fp,sp,12
    4a58:	e13ffe15 	stw	r4,-8(fp)
    4a5c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    4a60:	e0bffe17 	ldw	r2,-8(fp)
    4a64:	10800317 	ldw	r2,12(r2)
    4a68:	10800037 	ldwio	r2,0(r2)
    4a6c:	1080040c 	andi	r2,r2,16
    4a70:	10000226 	beq	r2,zero,4a7c <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
    4a74:	00bffc04 	movi	r2,-16
    4a78:	00003906 	br	4b60 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    4a7c:	e0bffe17 	ldw	r2,-8(fp)
    4a80:	10800317 	ldw	r2,12(r2)
    4a84:	10800404 	addi	r2,r2,16
    4a88:	e0fffe17 	ldw	r3,-8(fp)
    4a8c:	18c00317 	ldw	r3,12(r3)
    4a90:	18c00404 	addi	r3,r3,16
    4a94:	19000037 	ldwio	r4,0(r3)
    4a98:	00fff7c4 	movi	r3,-33
    4a9c:	20c6703a 	and	r3,r4,r3
    4aa0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    4aa4:	e0bffe17 	ldw	r2,-8(fp)
    4aa8:	10800317 	ldw	r2,12(r2)
    4aac:	00c03fc4 	movi	r3,255
    4ab0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    4ab4:	e0bffe17 	ldw	r2,-8(fp)
    4ab8:	10800317 	ldw	r2,12(r2)
    4abc:	10800804 	addi	r2,r2,32
    4ac0:	e0ffff17 	ldw	r3,-4(fp)
    4ac4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
    4ac8:	e0bffe17 	ldw	r2,-8(fp)
    4acc:	10800917 	ldw	r2,36(r2)
    4ad0:	10001126 	beq	r2,zero,4b18 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    4ad4:	e0bffe17 	ldw	r2,-8(fp)
    4ad8:	10800317 	ldw	r2,12(r2)
    4adc:	10800404 	addi	r2,r2,16
    4ae0:	10800037 	ldwio	r2,0(r2)
    4ae4:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
    4ae8:	e0bffe17 	ldw	r2,-8(fp)
    4aec:	10c00b17 	ldw	r3,44(r2)
    4af0:	e0bffd17 	ldw	r2,-12(fp)
    4af4:	1884b03a 	or	r2,r3,r2
    4af8:	10801814 	ori	r2,r2,96
    4afc:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    4b00:	e0bffe17 	ldw	r2,-8(fp)
    4b04:	10800317 	ldw	r2,12(r2)
    4b08:	10800404 	addi	r2,r2,16
    4b0c:	e0fffd17 	ldw	r3,-12(fp)
    4b10:	10c00035 	stwio	r3,0(r2)
    4b14:	00001106 	br	4b5c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    4b18:	e0bffe17 	ldw	r2,-8(fp)
    4b1c:	10800317 	ldw	r2,12(r2)
    4b20:	10800404 	addi	r2,r2,16
    4b24:	10800037 	ldwio	r2,0(r2)
    4b28:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
    4b2c:	e0bffd17 	ldw	r2,-12(fp)
    4b30:	10801814 	ori	r2,r2,96
    4b34:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
    4b38:	e0fffd17 	ldw	r3,-12(fp)
    4b3c:	00bffbc4 	movi	r2,-17
    4b40:	1884703a 	and	r2,r3,r2
    4b44:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    4b48:	e0bffe17 	ldw	r2,-8(fp)
    4b4c:	10800317 	ldw	r2,12(r2)
    4b50:	10800404 	addi	r2,r2,16
    4b54:	e0fffd17 	ldw	r3,-12(fp)
    4b58:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
    4b5c:	0005883a 	mov	r2,zero
}
    4b60:	e037883a 	mov	sp,fp
    4b64:	df000017 	ldw	fp,0(sp)
    4b68:	dec00104 	addi	sp,sp,4
    4b6c:	f800283a 	ret

00004b70 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
    4b70:	defffc04 	addi	sp,sp,-16
    4b74:	df000315 	stw	fp,12(sp)
    4b78:	df000304 	addi	fp,sp,12
    4b7c:	e13ffe15 	stw	r4,-8(fp)
    4b80:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    4b84:	0001883a 	nop
    4b88:	e0bffe17 	ldw	r2,-8(fp)
    4b8c:	10800317 	ldw	r2,12(r2)
    4b90:	10800037 	ldwio	r2,0(r2)
    4b94:	1080040c 	andi	r2,r2,16
    4b98:	103ffb1e 	bne	r2,zero,4b88 <_gp+0xffff5f60>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    4b9c:	e0bffe17 	ldw	r2,-8(fp)
    4ba0:	10800317 	ldw	r2,12(r2)
    4ba4:	10800404 	addi	r2,r2,16
    4ba8:	e0fffe17 	ldw	r3,-8(fp)
    4bac:	18c00317 	ldw	r3,12(r3)
    4bb0:	18c00404 	addi	r3,r3,16
    4bb4:	19000037 	ldwio	r4,0(r3)
    4bb8:	00fff7c4 	movi	r3,-33
    4bbc:	20c6703a 	and	r3,r4,r3
    4bc0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    4bc4:	e0bffe17 	ldw	r2,-8(fp)
    4bc8:	10800317 	ldw	r2,12(r2)
    4bcc:	00c03fc4 	movi	r3,255
    4bd0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
    4bd4:	e0bffe17 	ldw	r2,-8(fp)
    4bd8:	10800317 	ldw	r2,12(r2)
    4bdc:	10800804 	addi	r2,r2,32
    4be0:	e0ffff17 	ldw	r3,-4(fp)
    4be4:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    4be8:	e0bffe17 	ldw	r2,-8(fp)
    4bec:	10800317 	ldw	r2,12(r2)
    4bf0:	10800404 	addi	r2,r2,16
    4bf4:	e0fffe17 	ldw	r3,-8(fp)
    4bf8:	18c00317 	ldw	r3,12(r3)
    4bfc:	18c00404 	addi	r3,r3,16
    4c00:	18c00037 	ldwio	r3,0(r3)
    4c04:	18c01814 	ori	r3,r3,96
    4c08:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
    4c0c:	0001883a 	nop
    4c10:	e0bffe17 	ldw	r2,-8(fp)
    4c14:	10800317 	ldw	r2,12(r2)
    4c18:	10800037 	ldwio	r2,0(r2)
    4c1c:	1080040c 	andi	r2,r2,16
    4c20:	103ffb1e 	bne	r2,zero,4c10 <_gp+0xffff5fe8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    4c24:	e0bffe17 	ldw	r2,-8(fp)
    4c28:	10800317 	ldw	r2,12(r2)
    4c2c:	10800404 	addi	r2,r2,16
    4c30:	e0fffe17 	ldw	r3,-8(fp)
    4c34:	18c00317 	ldw	r3,12(r3)
    4c38:	18c00404 	addi	r3,r3,16
    4c3c:	19000037 	ldwio	r4,0(r3)
    4c40:	00fff7c4 	movi	r3,-33
    4c44:	20c6703a 	and	r3,r4,r3
    4c48:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
    4c4c:	e0bffe17 	ldw	r2,-8(fp)
    4c50:	10800317 	ldw	r2,12(r2)
    4c54:	10800037 	ldwio	r2,0(r2)
    4c58:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    4c5c:	e0bffe17 	ldw	r2,-8(fp)
    4c60:	10800317 	ldw	r2,12(r2)
    4c64:	00c03fc4 	movi	r3,255
    4c68:	10c00035 	stwio	r3,0(r2)

  return status;
    4c6c:	e0bffd03 	ldbu	r2,-12(fp)
}
    4c70:	e037883a 	mov	sp,fp
    4c74:	df000017 	ldw	fp,0(sp)
    4c78:	dec00104 	addi	sp,sp,4
    4c7c:	f800283a 	ret

00004c80 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
    4c80:	defff404 	addi	sp,sp,-48
    4c84:	dfc00b15 	stw	ra,44(sp)
    4c88:	df000a15 	stw	fp,40(sp)
    4c8c:	df000a04 	addi	fp,sp,40
    4c90:	e13ffb15 	stw	r4,-20(fp)
    4c94:	e17ffc15 	stw	r5,-16(fp)
    4c98:	e1bffd15 	stw	r6,-12(fp)
    4c9c:	e1fffe15 	stw	r7,-8(fp)
    4ca0:	e0800217 	ldw	r2,8(fp)
    4ca4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
    4ca8:	e0bfff0b 	ldhu	r2,-4(fp)
    4cac:	d8000415 	stw	zero,16(sp)
    4cb0:	d8000315 	stw	zero,12(sp)
    4cb4:	e0c00417 	ldw	r3,16(fp)
    4cb8:	d8c00215 	stw	r3,8(sp)
    4cbc:	e0c00317 	ldw	r3,12(fp)
    4cc0:	d8c00115 	stw	r3,4(sp)
    4cc4:	d8800015 	stw	r2,0(sp)
    4cc8:	e1fffe17 	ldw	r7,-8(fp)
    4ccc:	e1bffd17 	ldw	r6,-12(fp)
    4cd0:	e17ffc17 	ldw	r5,-16(fp)
    4cd4:	e13ffb17 	ldw	r4,-20(fp)
    4cd8:	0004cf40 	call	4cf4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
    4cdc:	0001883a 	nop
    4ce0:	e037883a 	mov	sp,fp
    4ce4:	dfc00117 	ldw	ra,4(sp)
    4ce8:	df000017 	ldw	fp,0(sp)
    4cec:	dec00204 	addi	sp,sp,8
    4cf0:	f800283a 	ret

00004cf4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
    4cf4:	defff204 	addi	sp,sp,-56
    4cf8:	dfc00d15 	stw	ra,52(sp)
    4cfc:	df000c15 	stw	fp,48(sp)
    4d00:	df000c04 	addi	fp,sp,48
    4d04:	e13ffb15 	stw	r4,-20(fp)
    4d08:	e17ffc15 	stw	r5,-16(fp)
    4d0c:	e1bffd15 	stw	r6,-12(fp)
    4d10:	e1fffe15 	stw	r7,-8(fp)
    4d14:	e0800217 	ldw	r2,8(fp)
    4d18:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    4d1c:	e0bfff0b 	ldhu	r2,-4(fp)
    4d20:	d8000615 	stw	zero,24(sp)
    4d24:	e0c00617 	ldw	r3,24(fp)
    4d28:	d8c00515 	stw	r3,20(sp)
    4d2c:	e0c00517 	ldw	r3,20(fp)
    4d30:	d8c00415 	stw	r3,16(sp)
    4d34:	e0c00417 	ldw	r3,16(fp)
    4d38:	d8c00315 	stw	r3,12(sp)
    4d3c:	e0c00317 	ldw	r3,12(fp)
    4d40:	d8c00215 	stw	r3,8(sp)
    4d44:	d8000115 	stw	zero,4(sp)
    4d48:	d8800015 	stw	r2,0(sp)
    4d4c:	e1fffe17 	ldw	r7,-8(fp)
    4d50:	e1bffd17 	ldw	r6,-12(fp)
    4d54:	e17ffc17 	ldw	r5,-16(fp)
    4d58:	e13ffb17 	ldw	r4,-20(fp)
    4d5c:	00052880 	call	5288 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
    4d60:	0001883a 	nop
    4d64:	e037883a 	mov	sp,fp
    4d68:	dfc00117 	ldw	ra,4(sp)
    4d6c:	df000017 	ldw	fp,0(sp)
    4d70:	dec00204 	addi	sp,sp,8
    4d74:	f800283a 	ret

00004d78 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
    4d78:	defff804 	addi	sp,sp,-32
    4d7c:	dfc00715 	stw	ra,28(sp)
    4d80:	df000615 	stw	fp,24(sp)
    4d84:	df000604 	addi	fp,sp,24
    4d88:	e13ffc15 	stw	r4,-16(fp)
    4d8c:	e17ffd15 	stw	r5,-12(fp)
    4d90:	e1bffe15 	stw	r6,-8(fp)
    4d94:	3805883a 	mov	r2,r7
    4d98:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
    4d9c:	e0ffff0b 	ldhu	r3,-4(fp)
    4da0:	d8000115 	stw	zero,4(sp)
    4da4:	e0800217 	ldw	r2,8(fp)
    4da8:	d8800015 	stw	r2,0(sp)
    4dac:	180f883a 	mov	r7,r3
    4db0:	e1bffe17 	ldw	r6,-8(fp)
    4db4:	e17ffd17 	ldw	r5,-12(fp)
    4db8:	e13ffc17 	ldw	r4,-16(fp)
    4dbc:	0004dd80 	call	4dd8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
    4dc0:	0001883a 	nop
    4dc4:	e037883a 	mov	sp,fp
    4dc8:	dfc00117 	ldw	ra,4(sp)
    4dcc:	df000017 	ldw	fp,0(sp)
    4dd0:	dec00204 	addi	sp,sp,8
    4dd4:	f800283a 	ret

00004dd8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
    4dd8:	defff304 	addi	sp,sp,-52
    4ddc:	dfc00c15 	stw	ra,48(sp)
    4de0:	df000b15 	stw	fp,44(sp)
    4de4:	df000b04 	addi	fp,sp,44
    4de8:	e13ffc15 	stw	r4,-16(fp)
    4dec:	e17ffd15 	stw	r5,-12(fp)
    4df0:	e1bffe15 	stw	r6,-8(fp)
    4df4:	3805883a 	mov	r2,r7
    4df8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    4dfc:	e0bfff0b 	ldhu	r2,-4(fp)
    4e00:	d8000615 	stw	zero,24(sp)
    4e04:	e0c00317 	ldw	r3,12(fp)
    4e08:	d8c00515 	stw	r3,20(sp)
    4e0c:	d8000415 	stw	zero,16(sp)
    4e10:	e0c00217 	ldw	r3,8(fp)
    4e14:	d8c00315 	stw	r3,12(sp)
    4e18:	d8000215 	stw	zero,8(sp)
    4e1c:	d8000115 	stw	zero,4(sp)
    4e20:	d8800015 	stw	r2,0(sp)
    4e24:	e1fffe17 	ldw	r7,-8(fp)
    4e28:	000d883a 	mov	r6,zero
    4e2c:	e17ffd17 	ldw	r5,-12(fp)
    4e30:	e13ffc17 	ldw	r4,-16(fp)
    4e34:	00052880 	call	5288 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
    4e38:	0001883a 	nop
    4e3c:	e037883a 	mov	sp,fp
    4e40:	dfc00117 	ldw	ra,4(sp)
    4e44:	df000017 	ldw	fp,0(sp)
    4e48:	dec00204 	addi	sp,sp,8
    4e4c:	f800283a 	ret

00004e50 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
    4e50:	defff404 	addi	sp,sp,-48
    4e54:	dfc00b15 	stw	ra,44(sp)
    4e58:	df000a15 	stw	fp,40(sp)
    4e5c:	df000a04 	addi	fp,sp,40
    4e60:	e13ffb15 	stw	r4,-20(fp)
    4e64:	e17ffc15 	stw	r5,-16(fp)
    4e68:	e1bffd15 	stw	r6,-12(fp)
    4e6c:	3807883a 	mov	r3,r7
    4e70:	e0800517 	ldw	r2,20(fp)
    4e74:	e0fffe0d 	sth	r3,-8(fp)
    4e78:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
    4e7c:	e0fffe0b 	ldhu	r3,-8(fp)
    4e80:	e0bfff03 	ldbu	r2,-4(fp)
    4e84:	d8800415 	stw	r2,16(sp)
    4e88:	d8000315 	stw	zero,12(sp)
    4e8c:	e0800417 	ldw	r2,16(fp)
    4e90:	d8800215 	stw	r2,8(sp)
    4e94:	e0800317 	ldw	r2,12(fp)
    4e98:	d8800115 	stw	r2,4(sp)
    4e9c:	e0800217 	ldw	r2,8(fp)
    4ea0:	d8800015 	stw	r2,0(sp)
    4ea4:	180f883a 	mov	r7,r3
    4ea8:	e1bffd17 	ldw	r6,-12(fp)
    4eac:	e17ffc17 	ldw	r5,-16(fp)
    4eb0:	e13ffb17 	ldw	r4,-20(fp)
    4eb4:	0004ed00 	call	4ed0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
    4eb8:	0001883a 	nop
    4ebc:	e037883a 	mov	sp,fp
    4ec0:	dfc00117 	ldw	ra,4(sp)
    4ec4:	df000017 	ldw	fp,0(sp)
    4ec8:	dec00204 	addi	sp,sp,8
    4ecc:	f800283a 	ret

00004ed0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
    4ed0:	defff204 	addi	sp,sp,-56
    4ed4:	dfc00d15 	stw	ra,52(sp)
    4ed8:	df000c15 	stw	fp,48(sp)
    4edc:	df000c04 	addi	fp,sp,48
    4ee0:	e13ffb15 	stw	r4,-20(fp)
    4ee4:	e17ffc15 	stw	r5,-16(fp)
    4ee8:	e1bffd15 	stw	r6,-12(fp)
    4eec:	3807883a 	mov	r3,r7
    4ef0:	e0800617 	ldw	r2,24(fp)
    4ef4:	e0fffe0d 	sth	r3,-8(fp)
    4ef8:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
    4efc:	e0bffe0b 	ldhu	r2,-8(fp)
    4f00:	e0ffff03 	ldbu	r3,-4(fp)
    4f04:	d8c00615 	stw	r3,24(sp)
    4f08:	d8000515 	stw	zero,20(sp)
    4f0c:	e0c00517 	ldw	r3,20(fp)
    4f10:	d8c00415 	stw	r3,16(sp)
    4f14:	e0c00317 	ldw	r3,12(fp)
    4f18:	d8c00315 	stw	r3,12(sp)
    4f1c:	e0c00217 	ldw	r3,8(fp)
    4f20:	d8c00215 	stw	r3,8(sp)
    4f24:	e0c00417 	ldw	r3,16(fp)
    4f28:	d8c00115 	stw	r3,4(sp)
    4f2c:	d8800015 	stw	r2,0(sp)
    4f30:	000f883a 	mov	r7,zero
    4f34:	e1bffd17 	ldw	r6,-12(fp)
    4f38:	e17ffc17 	ldw	r5,-16(fp)
    4f3c:	e13ffb17 	ldw	r4,-20(fp)
    4f40:	00052880 	call	5288 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
    4f44:	0001883a 	nop
    4f48:	e037883a 	mov	sp,fp
    4f4c:	dfc00117 	ldw	ra,4(sp)
    4f50:	df000017 	ldw	fp,0(sp)
    4f54:	dec00204 	addi	sp,sp,8
    4f58:	f800283a 	ret

00004f5c <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
    4f5c:	defffb04 	addi	sp,sp,-20
    4f60:	df000415 	stw	fp,16(sp)
    4f64:	df000404 	addi	fp,sp,16
    4f68:	e13ffc15 	stw	r4,-16(fp)
    4f6c:	e17ffd15 	stw	r5,-12(fp)
    4f70:	e1bffe15 	stw	r6,-8(fp)
    4f74:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
    4f78:	e0bffc17 	ldw	r2,-16(fp)
    4f7c:	e0fffd17 	ldw	r3,-12(fp)
    4f80:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
    4f84:	e0bffc17 	ldw	r2,-16(fp)
    4f88:	e0ffff17 	ldw	r3,-4(fp)
    4f8c:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
    4f90:	e0bffc17 	ldw	r2,-16(fp)
    4f94:	e0fffe17 	ldw	r3,-8(fp)
    4f98:	10c00b15 	stw	r3,44(r2)
}
    4f9c:	0001883a 	nop
    4fa0:	e037883a 	mov	sp,fp
    4fa4:	df000017 	ldw	fp,0(sp)
    4fa8:	dec00104 	addi	sp,sp,4
    4fac:	f800283a 	ret

00004fb0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
    4fb0:	defffd04 	addi	sp,sp,-12
    4fb4:	df000215 	stw	fp,8(sp)
    4fb8:	df000204 	addi	fp,sp,8
    4fbc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    4fc0:	e0bfff17 	ldw	r2,-4(fp)
    4fc4:	10800317 	ldw	r2,12(r2)
    4fc8:	10800404 	addi	r2,r2,16
    4fcc:	10800037 	ldwio	r2,0(r2)
    4fd0:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
    4fd4:	e0bffe17 	ldw	r2,-8(fp)
    4fd8:	10800814 	ori	r2,r2,32
    4fdc:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    4fe0:	e0bfff17 	ldw	r2,-4(fp)
    4fe4:	10800317 	ldw	r2,12(r2)
    4fe8:	10800404 	addi	r2,r2,16
    4fec:	e0fffe17 	ldw	r3,-8(fp)
    4ff0:	10c00035 	stwio	r3,0(r2)
}
    4ff4:	0001883a 	nop
    4ff8:	e037883a 	mov	sp,fp
    4ffc:	df000017 	ldw	fp,0(sp)
    5000:	dec00104 	addi	sp,sp,4
    5004:	f800283a 	ret

00005008 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
    5008:	defffd04 	addi	sp,sp,-12
    500c:	df000215 	stw	fp,8(sp)
    5010:	df000204 	addi	fp,sp,8
    5014:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    5018:	e0bfff17 	ldw	r2,-4(fp)
    501c:	10800317 	ldw	r2,12(r2)
    5020:	10800404 	addi	r2,r2,16
    5024:	10800037 	ldwio	r2,0(r2)
    5028:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
    502c:	e0fffe17 	ldw	r3,-8(fp)
    5030:	00bff7c4 	movi	r2,-33
    5034:	1884703a 	and	r2,r3,r2
    5038:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    503c:	e0bfff17 	ldw	r2,-4(fp)
    5040:	10800317 	ldw	r2,12(r2)
    5044:	10800404 	addi	r2,r2,16
    5048:	e0fffe17 	ldw	r3,-8(fp)
    504c:	10c00035 	stwio	r3,0(r2)
}
    5050:	0001883a 	nop
    5054:	e037883a 	mov	sp,fp
    5058:	df000017 	ldw	fp,0(sp)
    505c:	dec00104 	addi	sp,sp,4
    5060:	f800283a 	ret

00005064 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
    5064:	defffe04 	addi	sp,sp,-8
    5068:	df000115 	stw	fp,4(sp)
    506c:	df000104 	addi	fp,sp,4
    5070:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
    5074:	e0bfff17 	ldw	r2,-4(fp)
    5078:	10800784 	addi	r2,r2,30
    507c:	10800023 	ldbuio	r2,0(r2)
    5080:	10803fcc 	andi	r2,r2,255
    5084:	10801fcc 	andi	r2,r2,127
    5088:	10000226 	beq	r2,zero,5094 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
    508c:	00bffec4 	movi	r2,-5
    5090:	00000906 	br	50b8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
    5094:	e0bfff17 	ldw	r2,-4(fp)
    5098:	108007c4 	addi	r2,r2,31
    509c:	10800023 	ldbuio	r2,0(r2)
    50a0:	10803fcc 	andi	r2,r2,255
    50a4:	1080200c 	andi	r2,r2,128
    50a8:	10000226 	beq	r2,zero,50b4 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
    50ac:	00bfe244 	movi	r2,-119
    50b0:	00000106 	br	50b8 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
    50b4:	0005883a 	mov	r2,zero
}
    50b8:	e037883a 	mov	sp,fp
    50bc:	df000017 	ldw	fp,0(sp)
    50c0:	dec00104 	addi	sp,sp,4
    50c4:	f800283a 	ret

000050c8 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
    50c8:	defffc04 	addi	sp,sp,-16
    50cc:	dfc00315 	stw	ra,12(sp)
    50d0:	df000215 	stw	fp,8(sp)
    50d4:	df000204 	addi	fp,sp,8
    50d8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
    50dc:	d1600204 	addi	r5,gp,-32760
    50e0:	e13fff17 	ldw	r4,-4(fp)
    50e4:	0005acc0 	call	5acc <alt_find_dev>
    50e8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
    50ec:	e0bffe17 	ldw	r2,-8(fp)
    50f0:	1000041e 	bne	r2,zero,5104 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
    50f4:	0004a100 	call	4a10 <alt_get_errno>
    50f8:	1007883a 	mov	r3,r2
    50fc:	008004c4 	movi	r2,19
    5100:	18800015 	stw	r2,0(r3)
  }

  return dev;
    5104:	e0bffe17 	ldw	r2,-8(fp)
}
    5108:	e037883a 	mov	sp,fp
    510c:	dfc00117 	ldw	ra,4(sp)
    5110:	df000017 	ldw	fp,0(sp)
    5114:	dec00204 	addi	sp,sp,8
    5118:	f800283a 	ret

0000511c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
    511c:	defff104 	addi	sp,sp,-60
    5120:	dfc00e15 	stw	ra,56(sp)
    5124:	df000d15 	stw	fp,52(sp)
    5128:	df000d04 	addi	fp,sp,52
    512c:	e13ffa15 	stw	r4,-24(fp)
    5130:	e17ffb15 	stw	r5,-20(fp)
    5134:	e1bffc15 	stw	r6,-16(fp)
    5138:	e1fffd15 	stw	r7,-12(fp)
    513c:	e0c00217 	ldw	r3,8(fp)
    5140:	e0800617 	ldw	r2,24(fp)
    5144:	e0fffe0d 	sth	r3,-8(fp)
    5148:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
    514c:	e0bffe0b 	ldhu	r2,-8(fp)
    5150:	e0ffff03 	ldbu	r3,-4(fp)
    5154:	d8c00615 	stw	r3,24(sp)
    5158:	d8000515 	stw	zero,20(sp)
    515c:	d8000415 	stw	zero,16(sp)
    5160:	e0c00517 	ldw	r3,20(fp)
    5164:	d8c00315 	stw	r3,12(sp)
    5168:	e0c00417 	ldw	r3,16(fp)
    516c:	d8c00215 	stw	r3,8(sp)
    5170:	e0c00317 	ldw	r3,12(fp)
    5174:	d8c00115 	stw	r3,4(sp)
    5178:	d8800015 	stw	r2,0(sp)
    517c:	e1fffd17 	ldw	r7,-12(fp)
    5180:	e1bffc17 	ldw	r6,-16(fp)
    5184:	e17ffb17 	ldw	r5,-20(fp)
    5188:	e13ffa17 	ldw	r4,-24(fp)
    518c:	00052880 	call	5288 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
    5190:	0001883a 	nop
    5194:	e037883a 	mov	sp,fp
    5198:	dfc00117 	ldw	ra,4(sp)
    519c:	df000017 	ldw	fp,0(sp)
    51a0:	dec00204 	addi	sp,sp,8
    51a4:	f800283a 	ret

000051a8 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
    51a8:	defffc04 	addi	sp,sp,-16
    51ac:	df000315 	stw	fp,12(sp)
    51b0:	df000304 	addi	fp,sp,12
    51b4:	e13ffe15 	stw	r4,-8(fp)
    51b8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    51bc:	e0bffe17 	ldw	r2,-8(fp)
    51c0:	10800317 	ldw	r2,12(r2)
    51c4:	10800404 	addi	r2,r2,16
    51c8:	10800037 	ldwio	r2,0(r2)
    51cc:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
    51d0:	e0fffd17 	ldw	r3,-12(fp)
    51d4:	00a00434 	movhi	r2,32784
    51d8:	10bfffc4 	addi	r2,r2,-1
    51dc:	1884703a 	and	r2,r3,r2
    51e0:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
    51e4:	e0bfff17 	ldw	r2,-4(fp)
    51e8:	1004953a 	slli	r2,r2,20
    51ec:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
    51f0:	e0bffd17 	ldw	r2,-12(fp)
    51f4:	1884b03a 	or	r2,r3,r2
    51f8:	10800134 	orhi	r2,r2,4
    51fc:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    5200:	e0bffe17 	ldw	r2,-8(fp)
    5204:	10800317 	ldw	r2,12(r2)
    5208:	10800404 	addi	r2,r2,16
    520c:	e0fffd17 	ldw	r3,-12(fp)
    5210:	10c00035 	stwio	r3,0(r2)
  
  return;
    5214:	0001883a 	nop
}
    5218:	e037883a 	mov	sp,fp
    521c:	df000017 	ldw	fp,0(sp)
    5220:	dec00104 	addi	sp,sp,4
    5224:	f800283a 	ret

00005228 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
    5228:	defffd04 	addi	sp,sp,-12
    522c:	df000215 	stw	fp,8(sp)
    5230:	df000204 	addi	fp,sp,8
    5234:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    5238:	e0bfff17 	ldw	r2,-4(fp)
    523c:	10800317 	ldw	r2,12(r2)
    5240:	10800404 	addi	r2,r2,16
    5244:	10800037 	ldwio	r2,0(r2)
    5248:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
    524c:	e0fffe17 	ldw	r3,-8(fp)
    5250:	00bfff34 	movhi	r2,65532
    5254:	10bfffc4 	addi	r2,r2,-1
    5258:	1884703a 	and	r2,r3,r2
    525c:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
    5260:	e0bfff17 	ldw	r2,-4(fp)
    5264:	10800317 	ldw	r2,12(r2)
    5268:	10800404 	addi	r2,r2,16
    526c:	e0fffe17 	ldw	r3,-8(fp)
    5270:	10c00035 	stwio	r3,0(r2)
  
  return;
    5274:	0001883a 	nop
}
    5278:	e037883a 	mov	sp,fp
    527c:	df000017 	ldw	fp,0(sp)
    5280:	dec00104 	addi	sp,sp,4
    5284:	f800283a 	ret

00005288 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
    5288:	defff804 	addi	sp,sp,-32
    528c:	dfc00715 	stw	ra,28(sp)
    5290:	df000615 	stw	fp,24(sp)
    5294:	df000604 	addi	fp,sp,24
    5298:	e13ffa15 	stw	r4,-24(fp)
    529c:	e17ffb15 	stw	r5,-20(fp)
    52a0:	e1bffc15 	stw	r6,-16(fp)
    52a4:	e1fffd15 	stw	r7,-12(fp)
    52a8:	e0c00217 	ldw	r3,8(fp)
    52ac:	e0800817 	ldw	r2,32(fp)
    52b0:	e0fffe0d 	sth	r3,-8(fp)
    52b4:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    52b8:	e0bffb17 	ldw	r2,-20(fp)
    52bc:	108007c4 	addi	r2,r2,31
    52c0:	e0fffb17 	ldw	r3,-20(fp)
    52c4:	18c007c3 	ldbu	r3,31(r3)
    52c8:	19003fcc 	andi	r4,r3,255
    52cc:	00ffdfc4 	movi	r3,-129
    52d0:	20c6703a 	and	r3,r4,r3
    52d4:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
    52d8:	e0bffa17 	ldw	r2,-24(fp)
    52dc:	e0fffc17 	ldw	r3,-16(fp)
    52e0:	19403fcc 	andi	r5,r3,255
    52e4:	10c00003 	ldbu	r3,0(r2)
    52e8:	1806703a 	and	r3,r3,zero
    52ec:	1809883a 	mov	r4,r3
    52f0:	2807883a 	mov	r3,r5
    52f4:	20c6b03a 	or	r3,r4,r3
    52f8:	10c00005 	stb	r3,0(r2)
    52fc:	e0fffc17 	ldw	r3,-16(fp)
    5300:	1806d23a 	srli	r3,r3,8
    5304:	19403fcc 	andi	r5,r3,255
    5308:	10c00043 	ldbu	r3,1(r2)
    530c:	1806703a 	and	r3,r3,zero
    5310:	1809883a 	mov	r4,r3
    5314:	2807883a 	mov	r3,r5
    5318:	20c6b03a 	or	r3,r4,r3
    531c:	10c00045 	stb	r3,1(r2)
    5320:	e0fffc17 	ldw	r3,-16(fp)
    5324:	1806d43a 	srli	r3,r3,16
    5328:	19403fcc 	andi	r5,r3,255
    532c:	10c00083 	ldbu	r3,2(r2)
    5330:	1806703a 	and	r3,r3,zero
    5334:	1809883a 	mov	r4,r3
    5338:	2807883a 	mov	r3,r5
    533c:	20c6b03a 	or	r3,r4,r3
    5340:	10c00085 	stb	r3,2(r2)
    5344:	e0fffc17 	ldw	r3,-16(fp)
    5348:	180ad63a 	srli	r5,r3,24
    534c:	10c000c3 	ldbu	r3,3(r2)
    5350:	1806703a 	and	r3,r3,zero
    5354:	1809883a 	mov	r4,r3
    5358:	2807883a 	mov	r3,r5
    535c:	20c6b03a 	or	r3,r4,r3
    5360:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
    5364:	e0bffa17 	ldw	r2,-24(fp)
    5368:	e0fffd17 	ldw	r3,-12(fp)
    536c:	19403fcc 	andi	r5,r3,255
    5370:	10c00203 	ldbu	r3,8(r2)
    5374:	1806703a 	and	r3,r3,zero
    5378:	1809883a 	mov	r4,r3
    537c:	2807883a 	mov	r3,r5
    5380:	20c6b03a 	or	r3,r4,r3
    5384:	10c00205 	stb	r3,8(r2)
    5388:	e0fffd17 	ldw	r3,-12(fp)
    538c:	1806d23a 	srli	r3,r3,8
    5390:	19403fcc 	andi	r5,r3,255
    5394:	10c00243 	ldbu	r3,9(r2)
    5398:	1806703a 	and	r3,r3,zero
    539c:	1809883a 	mov	r4,r3
    53a0:	2807883a 	mov	r3,r5
    53a4:	20c6b03a 	or	r3,r4,r3
    53a8:	10c00245 	stb	r3,9(r2)
    53ac:	e0fffd17 	ldw	r3,-12(fp)
    53b0:	1806d43a 	srli	r3,r3,16
    53b4:	19403fcc 	andi	r5,r3,255
    53b8:	10c00283 	ldbu	r3,10(r2)
    53bc:	1806703a 	and	r3,r3,zero
    53c0:	1809883a 	mov	r4,r3
    53c4:	2807883a 	mov	r3,r5
    53c8:	20c6b03a 	or	r3,r4,r3
    53cc:	10c00285 	stb	r3,10(r2)
    53d0:	e0fffd17 	ldw	r3,-12(fp)
    53d4:	180ad63a 	srli	r5,r3,24
    53d8:	10c002c3 	ldbu	r3,11(r2)
    53dc:	1806703a 	and	r3,r3,zero
    53e0:	1809883a 	mov	r4,r3
    53e4:	2807883a 	mov	r3,r5
    53e8:	20c6b03a 	or	r3,r4,r3
    53ec:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
    53f0:	e0bffa17 	ldw	r2,-24(fp)
    53f4:	e0fffb17 	ldw	r3,-20(fp)
    53f8:	19403fcc 	andi	r5,r3,255
    53fc:	10c00403 	ldbu	r3,16(r2)
    5400:	1806703a 	and	r3,r3,zero
    5404:	1809883a 	mov	r4,r3
    5408:	2807883a 	mov	r3,r5
    540c:	20c6b03a 	or	r3,r4,r3
    5410:	10c00405 	stb	r3,16(r2)
    5414:	e0fffb17 	ldw	r3,-20(fp)
    5418:	1806d23a 	srli	r3,r3,8
    541c:	19403fcc 	andi	r5,r3,255
    5420:	10c00443 	ldbu	r3,17(r2)
    5424:	1806703a 	and	r3,r3,zero
    5428:	1809883a 	mov	r4,r3
    542c:	2807883a 	mov	r3,r5
    5430:	20c6b03a 	or	r3,r4,r3
    5434:	10c00445 	stb	r3,17(r2)
    5438:	e0fffb17 	ldw	r3,-20(fp)
    543c:	1806d43a 	srli	r3,r3,16
    5440:	19403fcc 	andi	r5,r3,255
    5444:	10c00483 	ldbu	r3,18(r2)
    5448:	1806703a 	and	r3,r3,zero
    544c:	1809883a 	mov	r4,r3
    5450:	2807883a 	mov	r3,r5
    5454:	20c6b03a 	or	r3,r4,r3
    5458:	10c00485 	stb	r3,18(r2)
    545c:	e0fffb17 	ldw	r3,-20(fp)
    5460:	180ad63a 	srli	r5,r3,24
    5464:	10c004c3 	ldbu	r3,19(r2)
    5468:	1806703a 	and	r3,r3,zero
    546c:	1809883a 	mov	r4,r3
    5470:	2807883a 	mov	r3,r5
    5474:	20c6b03a 	or	r3,r4,r3
    5478:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
    547c:	e0bffa17 	ldw	r2,-24(fp)
    5480:	10c00103 	ldbu	r3,4(r2)
    5484:	1806703a 	and	r3,r3,zero
    5488:	10c00105 	stb	r3,4(r2)
    548c:	10c00143 	ldbu	r3,5(r2)
    5490:	1806703a 	and	r3,r3,zero
    5494:	10c00145 	stb	r3,5(r2)
    5498:	10c00183 	ldbu	r3,6(r2)
    549c:	1806703a 	and	r3,r3,zero
    54a0:	10c00185 	stb	r3,6(r2)
    54a4:	10c001c3 	ldbu	r3,7(r2)
    54a8:	1806703a 	and	r3,r3,zero
    54ac:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
    54b0:	e0bffa17 	ldw	r2,-24(fp)
    54b4:	10c00303 	ldbu	r3,12(r2)
    54b8:	1806703a 	and	r3,r3,zero
    54bc:	10c00305 	stb	r3,12(r2)
    54c0:	10c00343 	ldbu	r3,13(r2)
    54c4:	1806703a 	and	r3,r3,zero
    54c8:	10c00345 	stb	r3,13(r2)
    54cc:	10c00383 	ldbu	r3,14(r2)
    54d0:	1806703a 	and	r3,r3,zero
    54d4:	10c00385 	stb	r3,14(r2)
    54d8:	10c003c3 	ldbu	r3,15(r2)
    54dc:	1806703a 	and	r3,r3,zero
    54e0:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
    54e4:	e0bffa17 	ldw	r2,-24(fp)
    54e8:	10c00503 	ldbu	r3,20(r2)
    54ec:	1806703a 	and	r3,r3,zero
    54f0:	10c00505 	stb	r3,20(r2)
    54f4:	10c00543 	ldbu	r3,21(r2)
    54f8:	1806703a 	and	r3,r3,zero
    54fc:	10c00545 	stb	r3,21(r2)
    5500:	10c00583 	ldbu	r3,22(r2)
    5504:	1806703a 	and	r3,r3,zero
    5508:	10c00585 	stb	r3,22(r2)
    550c:	10c005c3 	ldbu	r3,23(r2)
    5510:	1806703a 	and	r3,r3,zero
    5514:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
    5518:	e0bffa17 	ldw	r2,-24(fp)
    551c:	e0fffe17 	ldw	r3,-8(fp)
    5520:	19403fcc 	andi	r5,r3,255
    5524:	10c00603 	ldbu	r3,24(r2)
    5528:	1806703a 	and	r3,r3,zero
    552c:	1809883a 	mov	r4,r3
    5530:	2807883a 	mov	r3,r5
    5534:	20c6b03a 	or	r3,r4,r3
    5538:	10c00605 	stb	r3,24(r2)
    553c:	e0fffe17 	ldw	r3,-8(fp)
    5540:	1806d23a 	srli	r3,r3,8
    5544:	19403fcc 	andi	r5,r3,255
    5548:	10c00643 	ldbu	r3,25(r2)
    554c:	1806703a 	and	r3,r3,zero
    5550:	1809883a 	mov	r4,r3
    5554:	2807883a 	mov	r3,r5
    5558:	20c6b03a 	or	r3,r4,r3
    555c:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
    5560:	e0bffa17 	ldw	r2,-24(fp)
    5564:	10c00703 	ldbu	r3,28(r2)
    5568:	1806703a 	and	r3,r3,zero
    556c:	10c00705 	stb	r3,28(r2)
    5570:	10c00743 	ldbu	r3,29(r2)
    5574:	1806703a 	and	r3,r3,zero
    5578:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
    557c:	e0bffa17 	ldw	r2,-24(fp)
    5580:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
    5584:	e0800617 	ldw	r2,24(fp)
    5588:	1007883a 	mov	r3,r2
    558c:	e0bffa17 	ldw	r2,-24(fp)
    5590:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
    5594:	e0800717 	ldw	r2,28(fp)
    5598:	1007883a 	mov	r3,r2
    559c:	e0bffa17 	ldw	r2,-24(fp)
    55a0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
    55a4:	e0800317 	ldw	r2,12(fp)
    55a8:	10000226 	beq	r2,zero,55b4 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
    55ac:	00bfe044 	movi	r2,-127
    55b0:	00000106 	br	55b8 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
    55b4:	00bfe004 	movi	r2,-128
    55b8:	e0c00417 	ldw	r3,16(fp)
    55bc:	18000226 	beq	r3,zero,55c8 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
    55c0:	00c00084 	movi	r3,2
    55c4:	00000106 	br	55cc <alt_avalon_sgdma_construct_descriptor_burst+0x344>
    55c8:	0007883a 	mov	r3,zero
    55cc:	10c4b03a 	or	r2,r2,r3
    55d0:	1007883a 	mov	r3,r2
    55d4:	e0800517 	ldw	r2,20(fp)
    55d8:	10000226 	beq	r2,zero,55e4 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
    55dc:	00800104 	movi	r2,4
    55e0:	00000106 	br	55e8 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
    55e4:	0005883a 	mov	r2,zero
    55e8:	1884b03a 	or	r2,r3,r2
    55ec:	1007883a 	mov	r3,r2
    55f0:	e0bfff03 	ldbu	r2,-4(fp)
    55f4:	10000426 	beq	r2,zero,5608 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
    55f8:	e0bfff03 	ldbu	r2,-4(fp)
    55fc:	108003cc 	andi	r2,r2,15
    5600:	100490fa 	slli	r2,r2,3
    5604:	00000106 	br	560c <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
    5608:	0005883a 	mov	r2,zero
    560c:	1884b03a 	or	r2,r3,r2
    5610:	1007883a 	mov	r3,r2
    5614:	e0bffa17 	ldw	r2,-24(fp)
    5618:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
    561c:	01400804 	movi	r5,32
    5620:	e13ffa17 	ldw	r4,-24(fp)
    5624:	00058b80 	call	58b8 <alt_dcache_flush>
}
    5628:	0001883a 	nop
    562c:	e037883a 	mov	sp,fp
    5630:	dfc00117 	ldw	ra,4(sp)
    5634:	df000017 	ldw	fp,0(sp)
    5638:	dec00204 	addi	sp,sp,8
    563c:	f800283a 	ret

00005640 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
    5640:	defff904 	addi	sp,sp,-28
    5644:	dfc00615 	stw	ra,24(sp)
    5648:	df000515 	stw	fp,20(sp)
    564c:	df000504 	addi	fp,sp,20
    5650:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
    5654:	e0bfff17 	ldw	r2,-4(fp)
    5658:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
    565c:	e0bffb17 	ldw	r2,-20(fp)
    5660:	10800317 	ldw	r2,12(r2)
    5664:	10800404 	addi	r2,r2,16
    5668:	e0fffb17 	ldw	r3,-20(fp)
    566c:	18c00317 	ldw	r3,12(r3)
    5670:	18c00404 	addi	r3,r3,16
    5674:	18c00037 	ldwio	r3,0(r3)
    5678:	18e00034 	orhi	r3,r3,32768
    567c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
    5680:	e0bffb17 	ldw	r2,-20(fp)
    5684:	10800317 	ldw	r2,12(r2)
    5688:	10800404 	addi	r2,r2,16
    568c:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    5690:	e0bffb17 	ldw	r2,-20(fp)
    5694:	10800917 	ldw	r2,36(r2)
    5698:	10001226 	beq	r2,zero,56e4 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    569c:	0005303a 	rdctl	r2,status
    56a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    56a4:	e0fffd17 	ldw	r3,-12(fp)
    56a8:	00bfff84 	movi	r2,-2
    56ac:	1884703a 	and	r2,r3,r2
    56b0:	1001703a 	wrctl	status,r2
  
  return context;
    56b4:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
    56b8:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
    56bc:	e0bffb17 	ldw	r2,-20(fp)
    56c0:	10800917 	ldw	r2,36(r2)
    56c4:	e0fffb17 	ldw	r3,-20(fp)
    56c8:	18c00a17 	ldw	r3,40(r3)
    56cc:	1809883a 	mov	r4,r3
    56d0:	103ee83a 	callr	r2
    56d4:	e0bffc17 	ldw	r2,-16(fp)
    56d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    56dc:	e0bffe17 	ldw	r2,-8(fp)
    56e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
    56e4:	0001883a 	nop
    56e8:	e037883a 	mov	sp,fp
    56ec:	dfc00117 	ldw	ra,4(sp)
    56f0:	df000017 	ldw	fp,0(sp)
    56f4:	dec00204 	addi	sp,sp,8
    56f8:	f800283a 	ret

000056fc <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
    56fc:	defffa04 	addi	sp,sp,-24
    5700:	dfc00515 	stw	ra,20(sp)
    5704:	df000415 	stw	fp,16(sp)
    5708:	df000404 	addi	fp,sp,16
    570c:	e13ffd15 	stw	r4,-12(fp)
    5710:	e17ffe15 	stw	r5,-8(fp)
    5714:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    5718:	e0bffd17 	ldw	r2,-12(fp)
    571c:	10800317 	ldw	r2,12(r2)
    5720:	10800404 	addi	r2,r2,16
    5724:	00c00074 	movhi	r3,1
    5728:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
    572c:	e0bffd17 	ldw	r2,-12(fp)
    5730:	10800317 	ldw	r2,12(r2)
    5734:	10800404 	addi	r2,r2,16
    5738:	00c00074 	movhi	r3,1
    573c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
    5740:	e0bffd17 	ldw	r2,-12(fp)
    5744:	10800317 	ldw	r2,12(r2)
    5748:	10800404 	addi	r2,r2,16
    574c:	0007883a 	mov	r3,zero
    5750:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
    5754:	e0bffd17 	ldw	r2,-12(fp)
    5758:	10800317 	ldw	r2,12(r2)
    575c:	00c03fc4 	movi	r3,255
    5760:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
    5764:	d1600204 	addi	r5,gp,-32760
    5768:	e13ffd17 	ldw	r4,-12(fp)
    576c:	00059680 	call	5968 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
    5770:	d8000015 	stw	zero,0(sp)
    5774:	e1fffd17 	ldw	r7,-12(fp)
    5778:	01800034 	movhi	r6,0
    577c:	31959004 	addi	r6,r6,22080
    5780:	e17fff17 	ldw	r5,-4(fp)
    5784:	e13ffe17 	ldw	r4,-8(fp)
    5788:	0005b7c0 	call	5b7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
    578c:	0001883a 	nop
    5790:	e037883a 	mov	sp,fp
    5794:	dfc00117 	ldw	ra,4(sp)
    5798:	df000017 	ldw	fp,0(sp)
    579c:	dec00204 	addi	sp,sp,8
    57a0:	f800283a 	ret

000057a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    57a4:	defffe04 	addi	sp,sp,-8
    57a8:	dfc00115 	stw	ra,4(sp)
    57ac:	df000015 	stw	fp,0(sp)
    57b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    57b4:	d0a00917 	ldw	r2,-32732(gp)
    57b8:	10000326 	beq	r2,zero,57c8 <alt_get_errno+0x24>
    57bc:	d0a00917 	ldw	r2,-32732(gp)
    57c0:	103ee83a 	callr	r2
    57c4:	00000106 	br	57cc <alt_get_errno+0x28>
    57c8:	d0a0db04 	addi	r2,gp,-31892
}
    57cc:	e037883a 	mov	sp,fp
    57d0:	dfc00117 	ldw	ra,4(sp)
    57d4:	df000017 	ldw	fp,0(sp)
    57d8:	dec00204 	addi	sp,sp,8
    57dc:	f800283a 	ret

000057e0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    57e0:	defffb04 	addi	sp,sp,-20
    57e4:	dfc00415 	stw	ra,16(sp)
    57e8:	df000315 	stw	fp,12(sp)
    57ec:	df000304 	addi	fp,sp,12
    57f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    57f4:	e0bfff17 	ldw	r2,-4(fp)
    57f8:	10000816 	blt	r2,zero,581c <close+0x3c>
    57fc:	01400304 	movi	r5,12
    5800:	e13fff17 	ldw	r4,-4(fp)
    5804:	000685c0 	call	685c <__mulsi3>
    5808:	1007883a 	mov	r3,r2
    580c:	00800034 	movhi	r2,0
    5810:	109aaa04 	addi	r2,r2,27304
    5814:	1885883a 	add	r2,r3,r2
    5818:	00000106 	br	5820 <close+0x40>
    581c:	0005883a 	mov	r2,zero
    5820:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    5824:	e0bffd17 	ldw	r2,-12(fp)
    5828:	10001926 	beq	r2,zero,5890 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    582c:	e0bffd17 	ldw	r2,-12(fp)
    5830:	10800017 	ldw	r2,0(r2)
    5834:	10800417 	ldw	r2,16(r2)
    5838:	10000626 	beq	r2,zero,5854 <close+0x74>
    583c:	e0bffd17 	ldw	r2,-12(fp)
    5840:	10800017 	ldw	r2,0(r2)
    5844:	10800417 	ldw	r2,16(r2)
    5848:	e13ffd17 	ldw	r4,-12(fp)
    584c:	103ee83a 	callr	r2
    5850:	00000106 	br	5858 <close+0x78>
    5854:	0005883a 	mov	r2,zero
    5858:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    585c:	e13fff17 	ldw	r4,-4(fp)
    5860:	00062000 	call	6200 <alt_release_fd>
    if (rval < 0)
    5864:	e0bffe17 	ldw	r2,-8(fp)
    5868:	1000070e 	bge	r2,zero,5888 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    586c:	00057a40 	call	57a4 <alt_get_errno>
    5870:	1007883a 	mov	r3,r2
    5874:	e0bffe17 	ldw	r2,-8(fp)
    5878:	0085c83a 	sub	r2,zero,r2
    587c:	18800015 	stw	r2,0(r3)
      return -1;
    5880:	00bfffc4 	movi	r2,-1
    5884:	00000706 	br	58a4 <close+0xc4>
    }
    return 0;
    5888:	0005883a 	mov	r2,zero
    588c:	00000506 	br	58a4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    5890:	00057a40 	call	57a4 <alt_get_errno>
    5894:	1007883a 	mov	r3,r2
    5898:	00801444 	movi	r2,81
    589c:	18800015 	stw	r2,0(r3)
    return -1;
    58a0:	00bfffc4 	movi	r2,-1
  }
}
    58a4:	e037883a 	mov	sp,fp
    58a8:	dfc00117 	ldw	ra,4(sp)
    58ac:	df000017 	ldw	fp,0(sp)
    58b0:	dec00204 	addi	sp,sp,8
    58b4:	f800283a 	ret

000058b8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
    58b8:	defffd04 	addi	sp,sp,-12
    58bc:	df000215 	stw	fp,8(sp)
    58c0:	df000204 	addi	fp,sp,8
    58c4:	e13ffe15 	stw	r4,-8(fp)
    58c8:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    58cc:	0001883a 	nop
    58d0:	e037883a 	mov	sp,fp
    58d4:	df000017 	ldw	fp,0(sp)
    58d8:	dec00104 	addi	sp,sp,4
    58dc:	f800283a 	ret

000058e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    58e0:	deffff04 	addi	sp,sp,-4
    58e4:	df000015 	stw	fp,0(sp)
    58e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    58ec:	0001883a 	nop
    58f0:	e037883a 	mov	sp,fp
    58f4:	df000017 	ldw	fp,0(sp)
    58f8:	dec00104 	addi	sp,sp,4
    58fc:	f800283a 	ret

00005900 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    5900:	defffc04 	addi	sp,sp,-16
    5904:	df000315 	stw	fp,12(sp)
    5908:	df000304 	addi	fp,sp,12
    590c:	e13ffd15 	stw	r4,-12(fp)
    5910:	e17ffe15 	stw	r5,-8(fp)
    5914:	e1bfff15 	stw	r6,-4(fp)
  return len;
    5918:	e0bfff17 	ldw	r2,-4(fp)
}
    591c:	e037883a 	mov	sp,fp
    5920:	df000017 	ldw	fp,0(sp)
    5924:	dec00104 	addi	sp,sp,4
    5928:	f800283a 	ret

0000592c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    592c:	defffe04 	addi	sp,sp,-8
    5930:	dfc00115 	stw	ra,4(sp)
    5934:	df000015 	stw	fp,0(sp)
    5938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    593c:	d0a00917 	ldw	r2,-32732(gp)
    5940:	10000326 	beq	r2,zero,5950 <alt_get_errno+0x24>
    5944:	d0a00917 	ldw	r2,-32732(gp)
    5948:	103ee83a 	callr	r2
    594c:	00000106 	br	5954 <alt_get_errno+0x28>
    5950:	d0a0db04 	addi	r2,gp,-31892
}
    5954:	e037883a 	mov	sp,fp
    5958:	dfc00117 	ldw	ra,4(sp)
    595c:	df000017 	ldw	fp,0(sp)
    5960:	dec00204 	addi	sp,sp,8
    5964:	f800283a 	ret

00005968 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    5968:	defffa04 	addi	sp,sp,-24
    596c:	dfc00515 	stw	ra,20(sp)
    5970:	df000415 	stw	fp,16(sp)
    5974:	df000404 	addi	fp,sp,16
    5978:	e13ffe15 	stw	r4,-8(fp)
    597c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    5980:	e0bffe17 	ldw	r2,-8(fp)
    5984:	10000326 	beq	r2,zero,5994 <alt_dev_llist_insert+0x2c>
    5988:	e0bffe17 	ldw	r2,-8(fp)
    598c:	10800217 	ldw	r2,8(r2)
    5990:	1000061e 	bne	r2,zero,59ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    5994:	000592c0 	call	592c <alt_get_errno>
    5998:	1007883a 	mov	r3,r2
    599c:	00800584 	movi	r2,22
    59a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    59a4:	00bffa84 	movi	r2,-22
    59a8:	00001306 	br	59f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    59ac:	e0bffe17 	ldw	r2,-8(fp)
    59b0:	e0ffff17 	ldw	r3,-4(fp)
    59b4:	e0fffc15 	stw	r3,-16(fp)
    59b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    59bc:	e0bffd17 	ldw	r2,-12(fp)
    59c0:	e0fffc17 	ldw	r3,-16(fp)
    59c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    59c8:	e0bffc17 	ldw	r2,-16(fp)
    59cc:	10c00017 	ldw	r3,0(r2)
    59d0:	e0bffd17 	ldw	r2,-12(fp)
    59d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    59d8:	e0bffc17 	ldw	r2,-16(fp)
    59dc:	10800017 	ldw	r2,0(r2)
    59e0:	e0fffd17 	ldw	r3,-12(fp)
    59e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    59e8:	e0bffc17 	ldw	r2,-16(fp)
    59ec:	e0fffd17 	ldw	r3,-12(fp)
    59f0:	10c00015 	stw	r3,0(r2)

  return 0;  
    59f4:	0005883a 	mov	r2,zero
}
    59f8:	e037883a 	mov	sp,fp
    59fc:	dfc00117 	ldw	ra,4(sp)
    5a00:	df000017 	ldw	fp,0(sp)
    5a04:	dec00204 	addi	sp,sp,8
    5a08:	f800283a 	ret

00005a0c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    5a0c:	defffd04 	addi	sp,sp,-12
    5a10:	dfc00215 	stw	ra,8(sp)
    5a14:	df000115 	stw	fp,4(sp)
    5a18:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5a1c:	00800034 	movhi	r2,0
    5a20:	109a2d04 	addi	r2,r2,26804
    5a24:	e0bfff15 	stw	r2,-4(fp)
    5a28:	00000606 	br	5a44 <_do_ctors+0x38>
        (*ctor) (); 
    5a2c:	e0bfff17 	ldw	r2,-4(fp)
    5a30:	10800017 	ldw	r2,0(r2)
    5a34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    5a38:	e0bfff17 	ldw	r2,-4(fp)
    5a3c:	10bfff04 	addi	r2,r2,-4
    5a40:	e0bfff15 	stw	r2,-4(fp)
    5a44:	e0ffff17 	ldw	r3,-4(fp)
    5a48:	00800034 	movhi	r2,0
    5a4c:	109a2e04 	addi	r2,r2,26808
    5a50:	18bff62e 	bgeu	r3,r2,5a2c <_gp+0xffff6e04>
        (*ctor) (); 
}
    5a54:	0001883a 	nop
    5a58:	e037883a 	mov	sp,fp
    5a5c:	dfc00117 	ldw	ra,4(sp)
    5a60:	df000017 	ldw	fp,0(sp)
    5a64:	dec00204 	addi	sp,sp,8
    5a68:	f800283a 	ret

00005a6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    5a6c:	defffd04 	addi	sp,sp,-12
    5a70:	dfc00215 	stw	ra,8(sp)
    5a74:	df000115 	stw	fp,4(sp)
    5a78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5a7c:	00800034 	movhi	r2,0
    5a80:	109a2d04 	addi	r2,r2,26804
    5a84:	e0bfff15 	stw	r2,-4(fp)
    5a88:	00000606 	br	5aa4 <_do_dtors+0x38>
        (*dtor) (); 
    5a8c:	e0bfff17 	ldw	r2,-4(fp)
    5a90:	10800017 	ldw	r2,0(r2)
    5a94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    5a98:	e0bfff17 	ldw	r2,-4(fp)
    5a9c:	10bfff04 	addi	r2,r2,-4
    5aa0:	e0bfff15 	stw	r2,-4(fp)
    5aa4:	e0ffff17 	ldw	r3,-4(fp)
    5aa8:	00800034 	movhi	r2,0
    5aac:	109a2e04 	addi	r2,r2,26808
    5ab0:	18bff62e 	bgeu	r3,r2,5a8c <_gp+0xffff6e64>
        (*dtor) (); 
}
    5ab4:	0001883a 	nop
    5ab8:	e037883a 	mov	sp,fp
    5abc:	dfc00117 	ldw	ra,4(sp)
    5ac0:	df000017 	ldw	fp,0(sp)
    5ac4:	dec00204 	addi	sp,sp,8
    5ac8:	f800283a 	ret

00005acc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    5acc:	defffa04 	addi	sp,sp,-24
    5ad0:	dfc00515 	stw	ra,20(sp)
    5ad4:	df000415 	stw	fp,16(sp)
    5ad8:	df000404 	addi	fp,sp,16
    5adc:	e13ffe15 	stw	r4,-8(fp)
    5ae0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    5ae4:	e0bfff17 	ldw	r2,-4(fp)
    5ae8:	10800017 	ldw	r2,0(r2)
    5aec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    5af0:	e13ffe17 	ldw	r4,-8(fp)
    5af4:	00043340 	call	4334 <strlen>
    5af8:	10800044 	addi	r2,r2,1
    5afc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5b00:	00000d06 	br	5b38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    5b04:	e0bffc17 	ldw	r2,-16(fp)
    5b08:	10800217 	ldw	r2,8(r2)
    5b0c:	e0fffd17 	ldw	r3,-12(fp)
    5b10:	180d883a 	mov	r6,r3
    5b14:	e17ffe17 	ldw	r5,-8(fp)
    5b18:	1009883a 	mov	r4,r2
    5b1c:	00065440 	call	6544 <memcmp>
    5b20:	1000021e 	bne	r2,zero,5b2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    5b24:	e0bffc17 	ldw	r2,-16(fp)
    5b28:	00000706 	br	5b48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    5b2c:	e0bffc17 	ldw	r2,-16(fp)
    5b30:	10800017 	ldw	r2,0(r2)
    5b34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    5b38:	e0fffc17 	ldw	r3,-16(fp)
    5b3c:	e0bfff17 	ldw	r2,-4(fp)
    5b40:	18bff01e 	bne	r3,r2,5b04 <_gp+0xffff6edc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    5b44:	0005883a 	mov	r2,zero
}
    5b48:	e037883a 	mov	sp,fp
    5b4c:	dfc00117 	ldw	ra,4(sp)
    5b50:	df000017 	ldw	fp,0(sp)
    5b54:	dec00204 	addi	sp,sp,8
    5b58:	f800283a 	ret

00005b5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5b5c:	deffff04 	addi	sp,sp,-4
    5b60:	df000015 	stw	fp,0(sp)
    5b64:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    5b68:	0001883a 	nop
    5b6c:	e037883a 	mov	sp,fp
    5b70:	df000017 	ldw	fp,0(sp)
    5b74:	dec00104 	addi	sp,sp,4
    5b78:	f800283a 	ret

00005b7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5b7c:	defff904 	addi	sp,sp,-28
    5b80:	dfc00615 	stw	ra,24(sp)
    5b84:	df000515 	stw	fp,20(sp)
    5b88:	df000504 	addi	fp,sp,20
    5b8c:	e13ffc15 	stw	r4,-16(fp)
    5b90:	e17ffd15 	stw	r5,-12(fp)
    5b94:	e1bffe15 	stw	r6,-8(fp)
    5b98:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    5b9c:	e0800217 	ldw	r2,8(fp)
    5ba0:	d8800015 	stw	r2,0(sp)
    5ba4:	e1ffff17 	ldw	r7,-4(fp)
    5ba8:	e1bffe17 	ldw	r6,-8(fp)
    5bac:	e17ffd17 	ldw	r5,-12(fp)
    5bb0:	e13ffc17 	ldw	r4,-16(fp)
    5bb4:	0005d2c0 	call	5d2c <alt_iic_isr_register>
}  
    5bb8:	e037883a 	mov	sp,fp
    5bbc:	dfc00117 	ldw	ra,4(sp)
    5bc0:	df000017 	ldw	fp,0(sp)
    5bc4:	dec00204 	addi	sp,sp,8
    5bc8:	f800283a 	ret

00005bcc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    5bcc:	defff904 	addi	sp,sp,-28
    5bd0:	df000615 	stw	fp,24(sp)
    5bd4:	df000604 	addi	fp,sp,24
    5bd8:	e13ffe15 	stw	r4,-8(fp)
    5bdc:	e17fff15 	stw	r5,-4(fp)
    5be0:	e0bfff17 	ldw	r2,-4(fp)
    5be4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5be8:	0005303a 	rdctl	r2,status
    5bec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5bf0:	e0fffb17 	ldw	r3,-20(fp)
    5bf4:	00bfff84 	movi	r2,-2
    5bf8:	1884703a 	and	r2,r3,r2
    5bfc:	1001703a 	wrctl	status,r2
  
  return context;
    5c00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5c04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    5c08:	00c00044 	movi	r3,1
    5c0c:	e0bffa17 	ldw	r2,-24(fp)
    5c10:	1884983a 	sll	r2,r3,r2
    5c14:	1007883a 	mov	r3,r2
    5c18:	d0a0df17 	ldw	r2,-31876(gp)
    5c1c:	1884b03a 	or	r2,r3,r2
    5c20:	d0a0df15 	stw	r2,-31876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5c24:	d0a0df17 	ldw	r2,-31876(gp)
    5c28:	100170fa 	wrctl	ienable,r2
    5c2c:	e0bffc17 	ldw	r2,-16(fp)
    5c30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5c34:	e0bffd17 	ldw	r2,-12(fp)
    5c38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5c3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    5c40:	0001883a 	nop
}
    5c44:	e037883a 	mov	sp,fp
    5c48:	df000017 	ldw	fp,0(sp)
    5c4c:	dec00104 	addi	sp,sp,4
    5c50:	f800283a 	ret

00005c54 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    5c54:	defff904 	addi	sp,sp,-28
    5c58:	df000615 	stw	fp,24(sp)
    5c5c:	df000604 	addi	fp,sp,24
    5c60:	e13ffe15 	stw	r4,-8(fp)
    5c64:	e17fff15 	stw	r5,-4(fp)
    5c68:	e0bfff17 	ldw	r2,-4(fp)
    5c6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c70:	0005303a 	rdctl	r2,status
    5c74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c78:	e0fffb17 	ldw	r3,-20(fp)
    5c7c:	00bfff84 	movi	r2,-2
    5c80:	1884703a 	and	r2,r3,r2
    5c84:	1001703a 	wrctl	status,r2
  
  return context;
    5c88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    5c8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    5c90:	00c00044 	movi	r3,1
    5c94:	e0bffa17 	ldw	r2,-24(fp)
    5c98:	1884983a 	sll	r2,r3,r2
    5c9c:	0084303a 	nor	r2,zero,r2
    5ca0:	1007883a 	mov	r3,r2
    5ca4:	d0a0df17 	ldw	r2,-31876(gp)
    5ca8:	1884703a 	and	r2,r3,r2
    5cac:	d0a0df15 	stw	r2,-31876(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5cb0:	d0a0df17 	ldw	r2,-31876(gp)
    5cb4:	100170fa 	wrctl	ienable,r2
    5cb8:	e0bffc17 	ldw	r2,-16(fp)
    5cbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5cc0:	e0bffd17 	ldw	r2,-12(fp)
    5cc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    5cc8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    5ccc:	0001883a 	nop
}
    5cd0:	e037883a 	mov	sp,fp
    5cd4:	df000017 	ldw	fp,0(sp)
    5cd8:	dec00104 	addi	sp,sp,4
    5cdc:	f800283a 	ret

00005ce0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    5ce0:	defffc04 	addi	sp,sp,-16
    5ce4:	df000315 	stw	fp,12(sp)
    5ce8:	df000304 	addi	fp,sp,12
    5cec:	e13ffe15 	stw	r4,-8(fp)
    5cf0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5cf4:	000530fa 	rdctl	r2,ienable
    5cf8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5cfc:	00c00044 	movi	r3,1
    5d00:	e0bfff17 	ldw	r2,-4(fp)
    5d04:	1884983a 	sll	r2,r3,r2
    5d08:	1007883a 	mov	r3,r2
    5d0c:	e0bffd17 	ldw	r2,-12(fp)
    5d10:	1884703a 	and	r2,r3,r2
    5d14:	1004c03a 	cmpne	r2,r2,zero
    5d18:	10803fcc 	andi	r2,r2,255
}
    5d1c:	e037883a 	mov	sp,fp
    5d20:	df000017 	ldw	fp,0(sp)
    5d24:	dec00104 	addi	sp,sp,4
    5d28:	f800283a 	ret

00005d2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5d2c:	defff504 	addi	sp,sp,-44
    5d30:	dfc00a15 	stw	ra,40(sp)
    5d34:	df000915 	stw	fp,36(sp)
    5d38:	df000904 	addi	fp,sp,36
    5d3c:	e13ffc15 	stw	r4,-16(fp)
    5d40:	e17ffd15 	stw	r5,-12(fp)
    5d44:	e1bffe15 	stw	r6,-8(fp)
    5d48:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    5d4c:	00bffa84 	movi	r2,-22
    5d50:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    5d54:	e0bffd17 	ldw	r2,-12(fp)
    5d58:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5d5c:	e0bff817 	ldw	r2,-32(fp)
    5d60:	10800808 	cmpgei	r2,r2,32
    5d64:	1000271e 	bne	r2,zero,5e04 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d68:	0005303a 	rdctl	r2,status
    5d6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d70:	e0fffb17 	ldw	r3,-20(fp)
    5d74:	00bfff84 	movi	r2,-2
    5d78:	1884703a 	and	r2,r3,r2
    5d7c:	1001703a 	wrctl	status,r2
  
  return context;
    5d80:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    5d84:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    5d88:	00800034 	movhi	r2,0
    5d8c:	109beb04 	addi	r2,r2,28588
    5d90:	e0fff817 	ldw	r3,-32(fp)
    5d94:	180690fa 	slli	r3,r3,3
    5d98:	10c5883a 	add	r2,r2,r3
    5d9c:	e0fffe17 	ldw	r3,-8(fp)
    5da0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    5da4:	00800034 	movhi	r2,0
    5da8:	109beb04 	addi	r2,r2,28588
    5dac:	e0fff817 	ldw	r3,-32(fp)
    5db0:	180690fa 	slli	r3,r3,3
    5db4:	10c5883a 	add	r2,r2,r3
    5db8:	10800104 	addi	r2,r2,4
    5dbc:	e0ffff17 	ldw	r3,-4(fp)
    5dc0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5dc4:	e0bffe17 	ldw	r2,-8(fp)
    5dc8:	10000526 	beq	r2,zero,5de0 <alt_iic_isr_register+0xb4>
    5dcc:	e0bff817 	ldw	r2,-32(fp)
    5dd0:	100b883a 	mov	r5,r2
    5dd4:	e13ffc17 	ldw	r4,-16(fp)
    5dd8:	0005bcc0 	call	5bcc <alt_ic_irq_enable>
    5ddc:	00000406 	br	5df0 <alt_iic_isr_register+0xc4>
    5de0:	e0bff817 	ldw	r2,-32(fp)
    5de4:	100b883a 	mov	r5,r2
    5de8:	e13ffc17 	ldw	r4,-16(fp)
    5dec:	0005c540 	call	5c54 <alt_ic_irq_disable>
    5df0:	e0bff715 	stw	r2,-36(fp)
    5df4:	e0bffa17 	ldw	r2,-24(fp)
    5df8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5dfc:	e0bff917 	ldw	r2,-28(fp)
    5e00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    5e04:	e0bff717 	ldw	r2,-36(fp)
}
    5e08:	e037883a 	mov	sp,fp
    5e0c:	dfc00117 	ldw	ra,4(sp)
    5e10:	df000017 	ldw	fp,0(sp)
    5e14:	dec00204 	addi	sp,sp,8
    5e18:	f800283a 	ret

00005e1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    5e1c:	defff804 	addi	sp,sp,-32
    5e20:	dfc00715 	stw	ra,28(sp)
    5e24:	df000615 	stw	fp,24(sp)
    5e28:	dc000515 	stw	r16,20(sp)
    5e2c:	df000604 	addi	fp,sp,24
    5e30:	e13ffb15 	stw	r4,-20(fp)
    5e34:	e17ffc15 	stw	r5,-16(fp)
    5e38:	e1bffd15 	stw	r6,-12(fp)
    5e3c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    5e40:	e1bffe17 	ldw	r6,-8(fp)
    5e44:	e17ffd17 	ldw	r5,-12(fp)
    5e48:	e13ffc17 	ldw	r4,-16(fp)
    5e4c:	00060a40 	call	60a4 <open>
    5e50:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    5e54:	e0bffa17 	ldw	r2,-24(fp)
    5e58:	10002216 	blt	r2,zero,5ee4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    5e5c:	04000034 	movhi	r16,0
    5e60:	841aaa04 	addi	r16,r16,27304
    5e64:	e0bffa17 	ldw	r2,-24(fp)
    5e68:	01400304 	movi	r5,12
    5e6c:	1009883a 	mov	r4,r2
    5e70:	000685c0 	call	685c <__mulsi3>
    5e74:	8085883a 	add	r2,r16,r2
    5e78:	10c00017 	ldw	r3,0(r2)
    5e7c:	e0bffb17 	ldw	r2,-20(fp)
    5e80:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    5e84:	04000034 	movhi	r16,0
    5e88:	841aaa04 	addi	r16,r16,27304
    5e8c:	e0bffa17 	ldw	r2,-24(fp)
    5e90:	01400304 	movi	r5,12
    5e94:	1009883a 	mov	r4,r2
    5e98:	000685c0 	call	685c <__mulsi3>
    5e9c:	8085883a 	add	r2,r16,r2
    5ea0:	10800104 	addi	r2,r2,4
    5ea4:	10c00017 	ldw	r3,0(r2)
    5ea8:	e0bffb17 	ldw	r2,-20(fp)
    5eac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    5eb0:	04000034 	movhi	r16,0
    5eb4:	841aaa04 	addi	r16,r16,27304
    5eb8:	e0bffa17 	ldw	r2,-24(fp)
    5ebc:	01400304 	movi	r5,12
    5ec0:	1009883a 	mov	r4,r2
    5ec4:	000685c0 	call	685c <__mulsi3>
    5ec8:	8085883a 	add	r2,r16,r2
    5ecc:	10800204 	addi	r2,r2,8
    5ed0:	10c00017 	ldw	r3,0(r2)
    5ed4:	e0bffb17 	ldw	r2,-20(fp)
    5ed8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    5edc:	e13ffa17 	ldw	r4,-24(fp)
    5ee0:	00062000 	call	6200 <alt_release_fd>
  }
} 
    5ee4:	0001883a 	nop
    5ee8:	e6ffff04 	addi	sp,fp,-4
    5eec:	dfc00217 	ldw	ra,8(sp)
    5ef0:	df000117 	ldw	fp,4(sp)
    5ef4:	dc000017 	ldw	r16,0(sp)
    5ef8:	dec00304 	addi	sp,sp,12
    5efc:	f800283a 	ret

00005f00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    5f00:	defffb04 	addi	sp,sp,-20
    5f04:	dfc00415 	stw	ra,16(sp)
    5f08:	df000315 	stw	fp,12(sp)
    5f0c:	df000304 	addi	fp,sp,12
    5f10:	e13ffd15 	stw	r4,-12(fp)
    5f14:	e17ffe15 	stw	r5,-8(fp)
    5f18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    5f1c:	01c07fc4 	movi	r7,511
    5f20:	01800044 	movi	r6,1
    5f24:	e17ffd17 	ldw	r5,-12(fp)
    5f28:	01000034 	movhi	r4,0
    5f2c:	211aad04 	addi	r4,r4,27316
    5f30:	0005e1c0 	call	5e1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    5f34:	01c07fc4 	movi	r7,511
    5f38:	000d883a 	mov	r6,zero
    5f3c:	e17ffe17 	ldw	r5,-8(fp)
    5f40:	01000034 	movhi	r4,0
    5f44:	211aaa04 	addi	r4,r4,27304
    5f48:	0005e1c0 	call	5e1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    5f4c:	01c07fc4 	movi	r7,511
    5f50:	01800044 	movi	r6,1
    5f54:	e17fff17 	ldw	r5,-4(fp)
    5f58:	01000034 	movhi	r4,0
    5f5c:	211ab004 	addi	r4,r4,27328
    5f60:	0005e1c0 	call	5e1c <alt_open_fd>
}  
    5f64:	0001883a 	nop
    5f68:	e037883a 	mov	sp,fp
    5f6c:	dfc00117 	ldw	ra,4(sp)
    5f70:	df000017 	ldw	fp,0(sp)
    5f74:	dec00204 	addi	sp,sp,8
    5f78:	f800283a 	ret

00005f7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    5f7c:	defffe04 	addi	sp,sp,-8
    5f80:	dfc00115 	stw	ra,4(sp)
    5f84:	df000015 	stw	fp,0(sp)
    5f88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    5f8c:	d0a00917 	ldw	r2,-32732(gp)
    5f90:	10000326 	beq	r2,zero,5fa0 <alt_get_errno+0x24>
    5f94:	d0a00917 	ldw	r2,-32732(gp)
    5f98:	103ee83a 	callr	r2
    5f9c:	00000106 	br	5fa4 <alt_get_errno+0x28>
    5fa0:	d0a0db04 	addi	r2,gp,-31892
}
    5fa4:	e037883a 	mov	sp,fp
    5fa8:	dfc00117 	ldw	ra,4(sp)
    5fac:	df000017 	ldw	fp,0(sp)
    5fb0:	dec00204 	addi	sp,sp,8
    5fb4:	f800283a 	ret

00005fb8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    5fb8:	defffb04 	addi	sp,sp,-20
    5fbc:	dfc00415 	stw	ra,16(sp)
    5fc0:	df000315 	stw	fp,12(sp)
    5fc4:	dc000215 	stw	r16,8(sp)
    5fc8:	df000304 	addi	fp,sp,12
    5fcc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    5fd0:	e0bffe17 	ldw	r2,-8(fp)
    5fd4:	10800217 	ldw	r2,8(r2)
    5fd8:	10d00034 	orhi	r3,r2,16384
    5fdc:	e0bffe17 	ldw	r2,-8(fp)
    5fe0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    5fe4:	e03ffd15 	stw	zero,-12(fp)
    5fe8:	00002306 	br	6078 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    5fec:	04000034 	movhi	r16,0
    5ff0:	841aaa04 	addi	r16,r16,27304
    5ff4:	e0bffd17 	ldw	r2,-12(fp)
    5ff8:	01400304 	movi	r5,12
    5ffc:	1009883a 	mov	r4,r2
    6000:	000685c0 	call	685c <__mulsi3>
    6004:	8085883a 	add	r2,r16,r2
    6008:	10c00017 	ldw	r3,0(r2)
    600c:	e0bffe17 	ldw	r2,-8(fp)
    6010:	10800017 	ldw	r2,0(r2)
    6014:	1880151e 	bne	r3,r2,606c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    6018:	04000034 	movhi	r16,0
    601c:	841aaa04 	addi	r16,r16,27304
    6020:	e0bffd17 	ldw	r2,-12(fp)
    6024:	01400304 	movi	r5,12
    6028:	1009883a 	mov	r4,r2
    602c:	000685c0 	call	685c <__mulsi3>
    6030:	8085883a 	add	r2,r16,r2
    6034:	10800204 	addi	r2,r2,8
    6038:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    603c:	10000b0e 	bge	r2,zero,606c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    6040:	01400304 	movi	r5,12
    6044:	e13ffd17 	ldw	r4,-12(fp)
    6048:	000685c0 	call	685c <__mulsi3>
    604c:	1007883a 	mov	r3,r2
    6050:	00800034 	movhi	r2,0
    6054:	109aaa04 	addi	r2,r2,27304
    6058:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    605c:	e0bffe17 	ldw	r2,-8(fp)
    6060:	18800226 	beq	r3,r2,606c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    6064:	00bffcc4 	movi	r2,-13
    6068:	00000806 	br	608c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    606c:	e0bffd17 	ldw	r2,-12(fp)
    6070:	10800044 	addi	r2,r2,1
    6074:	e0bffd15 	stw	r2,-12(fp)
    6078:	d0a00817 	ldw	r2,-32736(gp)
    607c:	1007883a 	mov	r3,r2
    6080:	e0bffd17 	ldw	r2,-12(fp)
    6084:	18bfd92e 	bgeu	r3,r2,5fec <_gp+0xffff73c4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    6088:	0005883a 	mov	r2,zero
}
    608c:	e6ffff04 	addi	sp,fp,-4
    6090:	dfc00217 	ldw	ra,8(sp)
    6094:	df000117 	ldw	fp,4(sp)
    6098:	dc000017 	ldw	r16,0(sp)
    609c:	dec00304 	addi	sp,sp,12
    60a0:	f800283a 	ret

000060a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    60a4:	defff604 	addi	sp,sp,-40
    60a8:	dfc00915 	stw	ra,36(sp)
    60ac:	df000815 	stw	fp,32(sp)
    60b0:	df000804 	addi	fp,sp,32
    60b4:	e13ffd15 	stw	r4,-12(fp)
    60b8:	e17ffe15 	stw	r5,-8(fp)
    60bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    60c0:	00bfffc4 	movi	r2,-1
    60c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    60c8:	00bffb44 	movi	r2,-19
    60cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    60d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    60d4:	d1600604 	addi	r5,gp,-32744
    60d8:	e13ffd17 	ldw	r4,-12(fp)
    60dc:	0005acc0 	call	5acc <alt_find_dev>
    60e0:	e0bff815 	stw	r2,-32(fp)
    60e4:	e0bff817 	ldw	r2,-32(fp)
    60e8:	1000051e 	bne	r2,zero,6100 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    60ec:	e13ffd17 	ldw	r4,-12(fp)
    60f0:	00062a80 	call	62a8 <alt_find_file>
    60f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    60f8:	00800044 	movi	r2,1
    60fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    6100:	e0bff817 	ldw	r2,-32(fp)
    6104:	10002b26 	beq	r2,zero,61b4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    6108:	e13ff817 	ldw	r4,-32(fp)
    610c:	00063b00 	call	63b0 <alt_get_fd>
    6110:	e0bff915 	stw	r2,-28(fp)
    6114:	e0bff917 	ldw	r2,-28(fp)
    6118:	1000030e 	bge	r2,zero,6128 <open+0x84>
    {
      status = index;
    611c:	e0bff917 	ldw	r2,-28(fp)
    6120:	e0bffa15 	stw	r2,-24(fp)
    6124:	00002506 	br	61bc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    6128:	01400304 	movi	r5,12
    612c:	e13ff917 	ldw	r4,-28(fp)
    6130:	000685c0 	call	685c <__mulsi3>
    6134:	1007883a 	mov	r3,r2
    6138:	00800034 	movhi	r2,0
    613c:	109aaa04 	addi	r2,r2,27304
    6140:	1885883a 	add	r2,r3,r2
    6144:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    6148:	e0fffe17 	ldw	r3,-8(fp)
    614c:	00900034 	movhi	r2,16384
    6150:	10bfffc4 	addi	r2,r2,-1
    6154:	1886703a 	and	r3,r3,r2
    6158:	e0bffc17 	ldw	r2,-16(fp)
    615c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    6160:	e0bffb17 	ldw	r2,-20(fp)
    6164:	1000051e 	bne	r2,zero,617c <open+0xd8>
    6168:	e13ffc17 	ldw	r4,-16(fp)
    616c:	0005fb80 	call	5fb8 <alt_file_locked>
    6170:	e0bffa15 	stw	r2,-24(fp)
    6174:	e0bffa17 	ldw	r2,-24(fp)
    6178:	10001016 	blt	r2,zero,61bc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    617c:	e0bff817 	ldw	r2,-32(fp)
    6180:	10800317 	ldw	r2,12(r2)
    6184:	10000826 	beq	r2,zero,61a8 <open+0x104>
    6188:	e0bff817 	ldw	r2,-32(fp)
    618c:	10800317 	ldw	r2,12(r2)
    6190:	e1ffff17 	ldw	r7,-4(fp)
    6194:	e1bffe17 	ldw	r6,-8(fp)
    6198:	e17ffd17 	ldw	r5,-12(fp)
    619c:	e13ffc17 	ldw	r4,-16(fp)
    61a0:	103ee83a 	callr	r2
    61a4:	00000106 	br	61ac <open+0x108>
    61a8:	0005883a 	mov	r2,zero
    61ac:	e0bffa15 	stw	r2,-24(fp)
    61b0:	00000206 	br	61bc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    61b4:	00bffb44 	movi	r2,-19
    61b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    61bc:	e0bffa17 	ldw	r2,-24(fp)
    61c0:	1000090e 	bge	r2,zero,61e8 <open+0x144>
  {
    alt_release_fd (index);  
    61c4:	e13ff917 	ldw	r4,-28(fp)
    61c8:	00062000 	call	6200 <alt_release_fd>
    ALT_ERRNO = -status;
    61cc:	0005f7c0 	call	5f7c <alt_get_errno>
    61d0:	1007883a 	mov	r3,r2
    61d4:	e0bffa17 	ldw	r2,-24(fp)
    61d8:	0085c83a 	sub	r2,zero,r2
    61dc:	18800015 	stw	r2,0(r3)
    return -1;
    61e0:	00bfffc4 	movi	r2,-1
    61e4:	00000106 	br	61ec <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    61e8:	e0bff917 	ldw	r2,-28(fp)
}
    61ec:	e037883a 	mov	sp,fp
    61f0:	dfc00117 	ldw	ra,4(sp)
    61f4:	df000017 	ldw	fp,0(sp)
    61f8:	dec00204 	addi	sp,sp,8
    61fc:	f800283a 	ret

00006200 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    6200:	defffc04 	addi	sp,sp,-16
    6204:	dfc00315 	stw	ra,12(sp)
    6208:	df000215 	stw	fp,8(sp)
    620c:	dc000115 	stw	r16,4(sp)
    6210:	df000204 	addi	fp,sp,8
    6214:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    6218:	e0bffe17 	ldw	r2,-8(fp)
    621c:	108000d0 	cmplti	r2,r2,3
    6220:	1000111e 	bne	r2,zero,6268 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    6224:	04000034 	movhi	r16,0
    6228:	841aaa04 	addi	r16,r16,27304
    622c:	e0bffe17 	ldw	r2,-8(fp)
    6230:	01400304 	movi	r5,12
    6234:	1009883a 	mov	r4,r2
    6238:	000685c0 	call	685c <__mulsi3>
    623c:	8085883a 	add	r2,r16,r2
    6240:	10800204 	addi	r2,r2,8
    6244:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    6248:	04000034 	movhi	r16,0
    624c:	841aaa04 	addi	r16,r16,27304
    6250:	e0bffe17 	ldw	r2,-8(fp)
    6254:	01400304 	movi	r5,12
    6258:	1009883a 	mov	r4,r2
    625c:	000685c0 	call	685c <__mulsi3>
    6260:	8085883a 	add	r2,r16,r2
    6264:	10000015 	stw	zero,0(r2)
  }
}
    6268:	0001883a 	nop
    626c:	e6ffff04 	addi	sp,fp,-4
    6270:	dfc00217 	ldw	ra,8(sp)
    6274:	df000117 	ldw	fp,4(sp)
    6278:	dc000017 	ldw	r16,0(sp)
    627c:	dec00304 	addi	sp,sp,12
    6280:	f800283a 	ret

00006284 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    6284:	deffff04 	addi	sp,sp,-4
    6288:	df000015 	stw	fp,0(sp)
    628c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    6290:	000170fa 	wrctl	ienable,zero
}
    6294:	0001883a 	nop
    6298:	e037883a 	mov	sp,fp
    629c:	df000017 	ldw	fp,0(sp)
    62a0:	dec00104 	addi	sp,sp,4
    62a4:	f800283a 	ret

000062a8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    62a8:	defffb04 	addi	sp,sp,-20
    62ac:	dfc00415 	stw	ra,16(sp)
    62b0:	df000315 	stw	fp,12(sp)
    62b4:	df000304 	addi	fp,sp,12
    62b8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    62bc:	d0a00417 	ldw	r2,-32752(gp)
    62c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    62c4:	00003106 	br	638c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    62c8:	e0bffd17 	ldw	r2,-12(fp)
    62cc:	10800217 	ldw	r2,8(r2)
    62d0:	1009883a 	mov	r4,r2
    62d4:	00043340 	call	4334 <strlen>
    62d8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    62dc:	e0bffd17 	ldw	r2,-12(fp)
    62e0:	10c00217 	ldw	r3,8(r2)
    62e4:	e0bffe17 	ldw	r2,-8(fp)
    62e8:	10bfffc4 	addi	r2,r2,-1
    62ec:	1885883a 	add	r2,r3,r2
    62f0:	10800003 	ldbu	r2,0(r2)
    62f4:	10803fcc 	andi	r2,r2,255
    62f8:	1080201c 	xori	r2,r2,128
    62fc:	10bfe004 	addi	r2,r2,-128
    6300:	10800bd8 	cmpnei	r2,r2,47
    6304:	1000031e 	bne	r2,zero,6314 <alt_find_file+0x6c>
    {
      len -= 1;
    6308:	e0bffe17 	ldw	r2,-8(fp)
    630c:	10bfffc4 	addi	r2,r2,-1
    6310:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6314:	e0bffe17 	ldw	r2,-8(fp)
    6318:	e0ffff17 	ldw	r3,-4(fp)
    631c:	1885883a 	add	r2,r3,r2
    6320:	10800003 	ldbu	r2,0(r2)
    6324:	10803fcc 	andi	r2,r2,255
    6328:	1080201c 	xori	r2,r2,128
    632c:	10bfe004 	addi	r2,r2,-128
    6330:	10800be0 	cmpeqi	r2,r2,47
    6334:	1000081e 	bne	r2,zero,6358 <alt_find_file+0xb0>
    6338:	e0bffe17 	ldw	r2,-8(fp)
    633c:	e0ffff17 	ldw	r3,-4(fp)
    6340:	1885883a 	add	r2,r3,r2
    6344:	10800003 	ldbu	r2,0(r2)
    6348:	10803fcc 	andi	r2,r2,255
    634c:	1080201c 	xori	r2,r2,128
    6350:	10bfe004 	addi	r2,r2,-128
    6354:	10000a1e 	bne	r2,zero,6380 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    6358:	e0bffd17 	ldw	r2,-12(fp)
    635c:	10800217 	ldw	r2,8(r2)
    6360:	e0fffe17 	ldw	r3,-8(fp)
    6364:	180d883a 	mov	r6,r3
    6368:	e17fff17 	ldw	r5,-4(fp)
    636c:	1009883a 	mov	r4,r2
    6370:	00065440 	call	6544 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    6374:	1000021e 	bne	r2,zero,6380 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    6378:	e0bffd17 	ldw	r2,-12(fp)
    637c:	00000706 	br	639c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    6380:	e0bffd17 	ldw	r2,-12(fp)
    6384:	10800017 	ldw	r2,0(r2)
    6388:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    638c:	e0fffd17 	ldw	r3,-12(fp)
    6390:	d0a00404 	addi	r2,gp,-32752
    6394:	18bfcc1e 	bne	r3,r2,62c8 <_gp+0xffff76a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    6398:	0005883a 	mov	r2,zero
}
    639c:	e037883a 	mov	sp,fp
    63a0:	dfc00117 	ldw	ra,4(sp)
    63a4:	df000017 	ldw	fp,0(sp)
    63a8:	dec00204 	addi	sp,sp,8
    63ac:	f800283a 	ret

000063b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    63b0:	defffa04 	addi	sp,sp,-24
    63b4:	dfc00515 	stw	ra,20(sp)
    63b8:	df000415 	stw	fp,16(sp)
    63bc:	dc000315 	stw	r16,12(sp)
    63c0:	df000404 	addi	fp,sp,16
    63c4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    63c8:	00bffa04 	movi	r2,-24
    63cc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    63d0:	e03ffc15 	stw	zero,-16(fp)
    63d4:	00001d06 	br	644c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
    63d8:	04000034 	movhi	r16,0
    63dc:	841aaa04 	addi	r16,r16,27304
    63e0:	e0bffc17 	ldw	r2,-16(fp)
    63e4:	01400304 	movi	r5,12
    63e8:	1009883a 	mov	r4,r2
    63ec:	000685c0 	call	685c <__mulsi3>
    63f0:	8085883a 	add	r2,r16,r2
    63f4:	10800017 	ldw	r2,0(r2)
    63f8:	1000111e 	bne	r2,zero,6440 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
    63fc:	04000034 	movhi	r16,0
    6400:	841aaa04 	addi	r16,r16,27304
    6404:	e0bffc17 	ldw	r2,-16(fp)
    6408:	01400304 	movi	r5,12
    640c:	1009883a 	mov	r4,r2
    6410:	000685c0 	call	685c <__mulsi3>
    6414:	8085883a 	add	r2,r16,r2
    6418:	e0fffe17 	ldw	r3,-8(fp)
    641c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    6420:	d0e00817 	ldw	r3,-32736(gp)
    6424:	e0bffc17 	ldw	r2,-16(fp)
    6428:	1880020e 	bge	r3,r2,6434 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
    642c:	e0bffc17 	ldw	r2,-16(fp)
    6430:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    6434:	e0bffc17 	ldw	r2,-16(fp)
    6438:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    643c:	00000606 	br	6458 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    6440:	e0bffc17 	ldw	r2,-16(fp)
    6444:	10800044 	addi	r2,r2,1
    6448:	e0bffc15 	stw	r2,-16(fp)
    644c:	e0bffc17 	ldw	r2,-16(fp)
    6450:	10800810 	cmplti	r2,r2,32
    6454:	103fe01e 	bne	r2,zero,63d8 <_gp+0xffff77b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    6458:	e0bffd17 	ldw	r2,-12(fp)
}
    645c:	e6ffff04 	addi	sp,fp,-4
    6460:	dfc00217 	ldw	ra,8(sp)
    6464:	df000117 	ldw	fp,4(sp)
    6468:	dc000017 	ldw	r16,0(sp)
    646c:	dec00304 	addi	sp,sp,12
    6470:	f800283a 	ret

00006474 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    6474:	defffe04 	addi	sp,sp,-8
    6478:	df000115 	stw	fp,4(sp)
    647c:	df000104 	addi	fp,sp,4
    6480:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    6484:	e0bfff17 	ldw	r2,-4(fp)
    6488:	10bffe84 	addi	r2,r2,-6
    648c:	10c00428 	cmpgeui	r3,r2,16
    6490:	18001a1e 	bne	r3,zero,64fc <alt_exception_cause_generated_bad_addr+0x88>
    6494:	100690ba 	slli	r3,r2,2
    6498:	00800034 	movhi	r2,0
    649c:	10992b04 	addi	r2,r2,25772
    64a0:	1885883a 	add	r2,r3,r2
    64a4:	10800017 	ldw	r2,0(r2)
    64a8:	1000683a 	jmp	r2
    64ac:	000064ec 	andhi	zero,zero,403
    64b0:	000064ec 	andhi	zero,zero,403
    64b4:	000064fc 	xorhi	zero,zero,403
    64b8:	000064fc 	xorhi	zero,zero,403
    64bc:	000064fc 	xorhi	zero,zero,403
    64c0:	000064ec 	andhi	zero,zero,403
    64c4:	000064f4 	movhi	zero,403
    64c8:	000064fc 	xorhi	zero,zero,403
    64cc:	000064ec 	andhi	zero,zero,403
    64d0:	000064ec 	andhi	zero,zero,403
    64d4:	000064fc 	xorhi	zero,zero,403
    64d8:	000064ec 	andhi	zero,zero,403
    64dc:	000064f4 	movhi	zero,403
    64e0:	000064fc 	xorhi	zero,zero,403
    64e4:	000064fc 	xorhi	zero,zero,403
    64e8:	000064ec 	andhi	zero,zero,403
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    64ec:	00800044 	movi	r2,1
    64f0:	00000306 	br	6500 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    64f4:	0005883a 	mov	r2,zero
    64f8:	00000106 	br	6500 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    64fc:	0005883a 	mov	r2,zero
  }
}
    6500:	e037883a 	mov	sp,fp
    6504:	df000017 	ldw	fp,0(sp)
    6508:	dec00104 	addi	sp,sp,4
    650c:	f800283a 	ret

00006510 <atexit>:
    6510:	200b883a 	mov	r5,r4
    6514:	000f883a 	mov	r7,zero
    6518:	000d883a 	mov	r6,zero
    651c:	0009883a 	mov	r4,zero
    6520:	00065741 	jmpi	6574 <__register_exitproc>

00006524 <exit>:
    6524:	defffe04 	addi	sp,sp,-8
    6528:	000b883a 	mov	r5,zero
    652c:	dc000015 	stw	r16,0(sp)
    6530:	dfc00115 	stw	ra,4(sp)
    6534:	2021883a 	mov	r16,r4
    6538:	00066cc0 	call	66cc <__call_exitprocs>
    653c:	8009883a 	mov	r4,r16
    6540:	00068840 	call	6884 <_exit>

00006544 <memcmp>:
    6544:	218d883a 	add	r6,r4,r6
    6548:	21800826 	beq	r4,r6,656c <memcmp+0x28>
    654c:	20800003 	ldbu	r2,0(r4)
    6550:	28c00003 	ldbu	r3,0(r5)
    6554:	10c00226 	beq	r2,r3,6560 <memcmp+0x1c>
    6558:	10c5c83a 	sub	r2,r2,r3
    655c:	f800283a 	ret
    6560:	21000044 	addi	r4,r4,1
    6564:	29400044 	addi	r5,r5,1
    6568:	003ff706 	br	6548 <_gp+0xffff7920>
    656c:	0005883a 	mov	r2,zero
    6570:	f800283a 	ret

00006574 <__register_exitproc>:
    6574:	00800034 	movhi	r2,0
    6578:	109b0a04 	addi	r2,r2,27688
    657c:	10c00017 	ldw	r3,0(r2)
    6580:	defff904 	addi	sp,sp,-28
    6584:	dc000015 	stw	r16,0(sp)
    6588:	1c000c17 	ldw	r16,48(r3)
    658c:	dd400515 	stw	r21,20(sp)
    6590:	dd000415 	stw	r20,16(sp)
    6594:	dcc00315 	stw	r19,12(sp)
    6598:	dc800215 	stw	r18,8(sp)
    659c:	dc400115 	stw	r17,4(sp)
    65a0:	dfc00615 	stw	ra,24(sp)
    65a4:	202b883a 	mov	r21,r4
    65a8:	2823883a 	mov	r17,r5
    65ac:	3027883a 	mov	r19,r6
    65b0:	3825883a 	mov	r18,r7
    65b4:	1029883a 	mov	r20,r2
    65b8:	8000021e 	bne	r16,zero,65c4 <__register_exitproc+0x50>
    65bc:	1c000d04 	addi	r16,r3,52
    65c0:	1c000c15 	stw	r16,48(r3)
    65c4:	80800117 	ldw	r2,4(r16)
    65c8:	00c007c4 	movi	r3,31
    65cc:	1880110e 	bge	r3,r2,6614 <__register_exitproc+0xa0>
    65d0:	00800034 	movhi	r2,0
    65d4:	10800004 	addi	r2,r2,0
    65d8:	1000021e 	bne	r2,zero,65e4 <__register_exitproc+0x70>
    65dc:	00bfffc4 	movi	r2,-1
    65e0:	00003106 	br	66a8 <__register_exitproc+0x134>
    65e4:	01002304 	movi	r4,140
    65e8:	00000000 	call	0 <__alt_mem_onchip_memory_nios-0x4000>
    65ec:	1021883a 	mov	r16,r2
    65f0:	103ffa26 	beq	r2,zero,65dc <_gp+0xffff79b4>
    65f4:	10000115 	stw	zero,4(r2)
    65f8:	a0800017 	ldw	r2,0(r20)
    65fc:	10c00c17 	ldw	r3,48(r2)
    6600:	80c00015 	stw	r3,0(r16)
    6604:	14000c15 	stw	r16,48(r2)
    6608:	80002215 	stw	zero,136(r16)
    660c:	a8001d26 	beq	r21,zero,6684 <__register_exitproc+0x110>
    6610:	00000606 	br	662c <__register_exitproc+0xb8>
    6614:	a8001b26 	beq	r21,zero,6684 <__register_exitproc+0x110>
    6618:	80802217 	ldw	r2,136(r16)
    661c:	1000091e 	bne	r2,zero,6644 <__register_exitproc+0xd0>
    6620:	00800034 	movhi	r2,0
    6624:	10800004 	addi	r2,r2,0
    6628:	103fec26 	beq	r2,zero,65dc <_gp+0xffff79b4>
    662c:	01004204 	movi	r4,264
    6630:	00000000 	call	0 <__alt_mem_onchip_memory_nios-0x4000>
    6634:	103fe926 	beq	r2,zero,65dc <_gp+0xffff79b4>
    6638:	10004015 	stw	zero,256(r2)
    663c:	10004115 	stw	zero,260(r2)
    6640:	80802215 	stw	r2,136(r16)
    6644:	81400117 	ldw	r5,4(r16)
    6648:	01000044 	movi	r4,1
    664c:	2947883a 	add	r3,r5,r5
    6650:	18c7883a 	add	r3,r3,r3
    6654:	10c7883a 	add	r3,r2,r3
    6658:	1cc00015 	stw	r19,0(r3)
    665c:	2148983a 	sll	r4,r4,r5
    6660:	11404017 	ldw	r5,256(r2)
    6664:	290ab03a 	or	r5,r5,r4
    6668:	11404015 	stw	r5,256(r2)
    666c:	1c802015 	stw	r18,128(r3)
    6670:	00c00084 	movi	r3,2
    6674:	a8c0031e 	bne	r21,r3,6684 <__register_exitproc+0x110>
    6678:	10c04117 	ldw	r3,260(r2)
    667c:	1908b03a 	or	r4,r3,r4
    6680:	11004115 	stw	r4,260(r2)
    6684:	80800117 	ldw	r2,4(r16)
    6688:	10c00044 	addi	r3,r2,1
    668c:	10800084 	addi	r2,r2,2
    6690:	1085883a 	add	r2,r2,r2
    6694:	1085883a 	add	r2,r2,r2
    6698:	80c00115 	stw	r3,4(r16)
    669c:	80a1883a 	add	r16,r16,r2
    66a0:	84400015 	stw	r17,0(r16)
    66a4:	0005883a 	mov	r2,zero
    66a8:	dfc00617 	ldw	ra,24(sp)
    66ac:	dd400517 	ldw	r21,20(sp)
    66b0:	dd000417 	ldw	r20,16(sp)
    66b4:	dcc00317 	ldw	r19,12(sp)
    66b8:	dc800217 	ldw	r18,8(sp)
    66bc:	dc400117 	ldw	r17,4(sp)
    66c0:	dc000017 	ldw	r16,0(sp)
    66c4:	dec00704 	addi	sp,sp,28
    66c8:	f800283a 	ret

000066cc <__call_exitprocs>:
    66cc:	defff504 	addi	sp,sp,-44
    66d0:	dd000515 	stw	r20,20(sp)
    66d4:	05000034 	movhi	r20,0
    66d8:	dc800315 	stw	r18,12(sp)
    66dc:	dfc00a15 	stw	ra,40(sp)
    66e0:	df000915 	stw	fp,36(sp)
    66e4:	ddc00815 	stw	r23,32(sp)
    66e8:	dd800715 	stw	r22,28(sp)
    66ec:	dd400615 	stw	r21,24(sp)
    66f0:	dcc00415 	stw	r19,16(sp)
    66f4:	dc400215 	stw	r17,8(sp)
    66f8:	dc000115 	stw	r16,4(sp)
    66fc:	d9000015 	stw	r4,0(sp)
    6700:	2825883a 	mov	r18,r5
    6704:	a51b0a04 	addi	r20,r20,27688
    6708:	a4400017 	ldw	r17,0(r20)
    670c:	8cc00c17 	ldw	r19,48(r17)
    6710:	8c400c04 	addi	r17,r17,48
    6714:	98004526 	beq	r19,zero,682c <__call_exitprocs+0x160>
    6718:	9c000117 	ldw	r16,4(r19)
    671c:	00900034 	movhi	r2,16384
    6720:	10bfffc4 	addi	r2,r2,-1
    6724:	9d402217 	ldw	r21,136(r19)
    6728:	85bfffc4 	addi	r22,r16,-1
    672c:	80a1883a 	add	r16,r16,r2
    6730:	8421883a 	add	r16,r16,r16
    6734:	8421883a 	add	r16,r16,r16
    6738:	ac2f883a 	add	r23,r21,r16
    673c:	84000204 	addi	r16,r16,8
    6740:	9c21883a 	add	r16,r19,r16
    6744:	b0002716 	blt	r22,zero,67e4 <__call_exitprocs+0x118>
    6748:	90000726 	beq	r18,zero,6768 <__call_exitprocs+0x9c>
    674c:	a800041e 	bne	r21,zero,6760 <__call_exitprocs+0x94>
    6750:	b5bfffc4 	addi	r22,r22,-1
    6754:	bdffff04 	addi	r23,r23,-4
    6758:	843fff04 	addi	r16,r16,-4
    675c:	003ff906 	br	6744 <_gp+0xffff7b1c>
    6760:	b9002017 	ldw	r4,128(r23)
    6764:	913ffa1e 	bne	r18,r4,6750 <_gp+0xffff7b28>
    6768:	99000117 	ldw	r4,4(r19)
    676c:	82000017 	ldw	r8,0(r16)
    6770:	213fffc4 	addi	r4,r4,-1
    6774:	b100021e 	bne	r22,r4,6780 <__call_exitprocs+0xb4>
    6778:	9d800115 	stw	r22,4(r19)
    677c:	00000106 	br	6784 <__call_exitprocs+0xb8>
    6780:	80000015 	stw	zero,0(r16)
    6784:	403ff226 	beq	r8,zero,6750 <_gp+0xffff7b28>
    6788:	9f000117 	ldw	fp,4(r19)
    678c:	a8000526 	beq	r21,zero,67a4 <__call_exitprocs+0xd8>
    6790:	00800044 	movi	r2,1
    6794:	1592983a 	sll	r9,r2,r22
    6798:	a9404017 	ldw	r5,256(r21)
    679c:	494a703a 	and	r5,r9,r5
    67a0:	2800021e 	bne	r5,zero,67ac <__call_exitprocs+0xe0>
    67a4:	403ee83a 	callr	r8
    67a8:	00000906 	br	67d0 <__call_exitprocs+0x104>
    67ac:	a9004117 	ldw	r4,260(r21)
    67b0:	4908703a 	and	r4,r9,r4
    67b4:	2000041e 	bne	r4,zero,67c8 <__call_exitprocs+0xfc>
    67b8:	b9400017 	ldw	r5,0(r23)
    67bc:	d9000017 	ldw	r4,0(sp)
    67c0:	403ee83a 	callr	r8
    67c4:	00000206 	br	67d0 <__call_exitprocs+0x104>
    67c8:	b9000017 	ldw	r4,0(r23)
    67cc:	403ee83a 	callr	r8
    67d0:	99000117 	ldw	r4,4(r19)
    67d4:	e13fcc1e 	bne	fp,r4,6708 <_gp+0xffff7ae0>
    67d8:	89000017 	ldw	r4,0(r17)
    67dc:	993fdc26 	beq	r19,r4,6750 <_gp+0xffff7b28>
    67e0:	003fc906 	br	6708 <_gp+0xffff7ae0>
    67e4:	00800034 	movhi	r2,0
    67e8:	10800004 	addi	r2,r2,0
    67ec:	10000f26 	beq	r2,zero,682c <__call_exitprocs+0x160>
    67f0:	99400117 	ldw	r5,4(r19)
    67f4:	99000017 	ldw	r4,0(r19)
    67f8:	2800091e 	bne	r5,zero,6820 <__call_exitprocs+0x154>
    67fc:	20000826 	beq	r4,zero,6820 <__call_exitprocs+0x154>
    6800:	89000015 	stw	r4,0(r17)
    6804:	a8000226 	beq	r21,zero,6810 <__call_exitprocs+0x144>
    6808:	a809883a 	mov	r4,r21
    680c:	00000000 	call	0 <__alt_mem_onchip_memory_nios-0x4000>
    6810:	9809883a 	mov	r4,r19
    6814:	00000000 	call	0 <__alt_mem_onchip_memory_nios-0x4000>
    6818:	8cc00017 	ldw	r19,0(r17)
    681c:	003fbd06 	br	6714 <_gp+0xffff7aec>
    6820:	9823883a 	mov	r17,r19
    6824:	2027883a 	mov	r19,r4
    6828:	003fba06 	br	6714 <_gp+0xffff7aec>
    682c:	dfc00a17 	ldw	ra,40(sp)
    6830:	df000917 	ldw	fp,36(sp)
    6834:	ddc00817 	ldw	r23,32(sp)
    6838:	dd800717 	ldw	r22,28(sp)
    683c:	dd400617 	ldw	r21,24(sp)
    6840:	dd000517 	ldw	r20,20(sp)
    6844:	dcc00417 	ldw	r19,16(sp)
    6848:	dc800317 	ldw	r18,12(sp)
    684c:	dc400217 	ldw	r17,8(sp)
    6850:	dc000117 	ldw	r16,4(sp)
    6854:	dec00b04 	addi	sp,sp,44
    6858:	f800283a 	ret

0000685c <__mulsi3>:
    685c:	0005883a 	mov	r2,zero
    6860:	20000726 	beq	r4,zero,6880 <__mulsi3+0x24>
    6864:	20c0004c 	andi	r3,r4,1
    6868:	2008d07a 	srli	r4,r4,1
    686c:	18000126 	beq	r3,zero,6874 <__mulsi3+0x18>
    6870:	1145883a 	add	r2,r2,r5
    6874:	294b883a 	add	r5,r5,r5
    6878:	203ffa1e 	bne	r4,zero,6864 <_gp+0xffff7c3c>
    687c:	f800283a 	ret
    6880:	f800283a 	ret

00006884 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    6884:	defffd04 	addi	sp,sp,-12
    6888:	df000215 	stw	fp,8(sp)
    688c:	df000204 	addi	fp,sp,8
    6890:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    6894:	0001883a 	nop
    6898:	e0bfff17 	ldw	r2,-4(fp)
    689c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    68a0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    68a4:	10000226 	beq	r2,zero,68b0 <_exit+0x2c>
    ALT_SIM_FAIL();
    68a8:	002af070 	cmpltui	zero,zero,43969
    68ac:	00000106 	br	68b4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    68b0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    68b4:	003fff06 	br	68b4 <_gp+0xffff7c8c>
